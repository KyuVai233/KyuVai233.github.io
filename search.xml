<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>学习设计模式</title>
      <link href="/2025/03/25/archives/%E5%AD%A6%E4%B9%A0%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2025/03/25/archives/%E5%AD%A6%E4%B9%A0%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#%E5%AD%A6%E4%B9%A0%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F">学习设计模式</a><ul><li><a href="#%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%88%86%E7%B1%BB">设计模式分类</a></li><li><a href="#%E5%88%9B%E9%80%A0%E5%9E%8B">创造型</a><ul><li><a href="#%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F">工厂方法模式</a></li><li><a href="#%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95">抽象工厂方法</a></li><li><a href="#%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F">建造者模式</a></li><li><a href="#%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F">原型模式</a></li><li><a href="#%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F">单例模式</a></li><li><a href="#%E5%88%9B%E9%80%A0%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AF%B9%E6%AF%94">创造型设计模式对比</a></li></ul></li><li><a href="#%E7%BB%93%E6%9E%84%E5%9E%8B">结构型</a><ul><li><a href="#%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F">适配器模式</a></li><li><a href="#%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F">桥接模式</a></li><li><a href="#%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F">组合模式</a></li><li><a href="#%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F">装饰器模式</a></li><li><a href="#%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F">外观模式</a></li><li><a href="#%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F">享元模式</a></li><li><a href="#%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F">代理模式</a></li><li><a href="#%E7%BB%93%E6%9E%84%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AF%B9%E6%AF%94">结构型设计模式对比</a></li></ul></li><li><a href="#%E8%A1%8C%E4%B8%BA%E5%9E%8B">行为型</a><ul><li><a href="#%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F">责任链模式</a></li><li><a href="#%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F">命令模式</a></li><li><a href="#%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F">迭代器模式</a></li><li><a href="#%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F">中介者模式</a></li><li><a href="#%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F">备忘录模式</a></li><li><a href="#%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F">观察者模式</a></li><li><a href="#%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F">状态模式</a></li></ul></li></ul></li></ul><h1 id="学习设计模式"><a href="#学习设计模式" class="headerlink" title="学习设计模式"></a>学习设计模式</h1><h2 id="设计模式分类"><a href="#设计模式分类" class="headerlink" title="设计模式分类"></a>设计模式分类</h2><ol><li><b>创造型</b></li></ol><ul><li>主要关注创造对象的过程，隐藏创造逻辑</li></ul><ol start="2"><li><b>结构型</b></li></ol><ul><li>主要管理类和对象的组合，形成较大的结构的同时保持结构的灵活性和高效性</li></ul><ol start="3"><li><b>行为型</b></li></ol><ul><li>主要优化对象间的交互和职责分配</li></ul><div style="border-top: 3px solid black; font-weight: bold; margin: 20px 0;"></div><h2 id="创造型"><a href="#创造型" class="headerlink" title="创造型"></a>创造型</h2><h3 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h3><ul><li>定义创建对象的接口，但由子类决定具体实例化的类。将对象的创建延迟到子类</li></ul><h4 id="要素"><a href="#要素" class="headerlink" title="要素"></a>要素</h4><ol><li><b>抽象产品</b></li></ol><ul><li>产品基类</li></ul><ol start="2"><li><b>具体产品</b></li></ol><ul><li>继承抽象产品，即要生产的对象</li></ul><ol start="3"><li><b>抽象工厂&#x2F;创建者</b></li></ol><ul><li>工厂基类，提供统一的抽象创造方法（接口），由具体工厂实现（重写）<i>(可省略？)</i></li></ul><ol start="4"><li><b>具体工厂</b></li></ol><ul><li>继承抽象工厂，实现（重写）抽象工厂的方法（接口），根据条件去创造具体产品</li></ul><p><b>示例代码</b></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; Vector2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum class</span> <span class="title class_">Attribute</span> &#123; Ice, Grass, Fire &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GameObject</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">GameObject</span>(<span class="type">const</span> Vector2&amp; _position) : <span class="built_in">position</span>(_position) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">on_update</span><span class="params">(<span class="type">float</span> delta)</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">on_render</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">Vector2 position;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sword</span> : <span class="keyword">public</span> GameObject</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Sword</span>(<span class="type">const</span> Vector2&amp; _position) : <span class="built_in">GameObject</span>(_position) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">on_update</span><span class="params">(<span class="type">float</span> delta)</span> <span class="keyword">override</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">on_render</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;生成剑纹理&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Slime</span> : <span class="keyword">public</span> GameObject</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Slime</span>(<span class="type">const</span> Vector2&amp; _position) : <span class="built_in">GameObject</span>(_position) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">on_update</span><span class="params">(<span class="type">float</span> delta)</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;slime 动画更新&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">on_render</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;生成 slime 动画&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IceSword</span> : <span class="keyword">public</span> Sword</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">IceSword</span>(<span class="type">const</span> Vector2&amp; _position) : <span class="built_in">Sword</span>(_position) &#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GrassSword</span> : <span class="keyword">public</span> Sword</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">GrassSword</span>(<span class="type">const</span> Vector2&amp; _position) : <span class="built_in">Sword</span>(_position) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FireSword</span> : <span class="keyword">public</span> Sword</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">FireSword</span>(<span class="type">const</span> Vector2&amp; _position) : <span class="built_in">Sword</span>(_position) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IceSlime</span> : <span class="keyword">public</span> Slime</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">IceSlime</span>(<span class="type">const</span> Vector2&amp; _position) : <span class="built_in">Slime</span>(_position) &#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GrassSlime</span> : <span class="keyword">public</span> Slime</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">GrassSlime</span>(<span class="type">const</span> Vector2&amp; _position) : <span class="built_in">Slime</span>(_position) &#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FireSlime</span> : <span class="keyword">public</span> Slime</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">FireSlime</span>(<span class="type">const</span> Vector2&amp; _position) : <span class="built_in">Slime</span>(_position) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SwordFactory</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">Sword* <span class="title">create</span><span class="params">(Attribute attribute, <span class="type">const</span> Vector2&amp; position)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">switch</span> (attribute)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> Attribute::Ice:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">IceSword</span>(position);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> Attribute::Grass:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">GrassSword</span>(position);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> Attribute::Fire:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">FireSword</span>(position);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SlimeFactory</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">Slime* <span class="title">create</span><span class="params">(Attribute attribute, <span class="type">const</span> Vector2&amp; position)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">switch</span> (attribute)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> Attribute::Ice:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">IceSlime</span>(position);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> Attribute::Grass:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">GrassSlime</span>(position);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> Attribute::Fire:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">FireSlime</span>(position);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FactoryMethodPattern</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">FactoryMethodPattern</span>()</span><br><span class="line">&#123;</span><br><span class="line">SwordFactory sword_factory;</span><br><span class="line">SlimeFactory slime_factory;</span><br><span class="line"></span><br><span class="line">game_obj_list.<span class="built_in">push_back</span>(sword_factory.<span class="built_in">create</span>(Attribute::Ice, &#123; <span class="number">200</span>, <span class="number">100</span> &#125;));</span><br><span class="line">game_obj_list.<span class="built_in">push_back</span>(sword_factory.<span class="built_in">create</span>(Attribute::Grass, &#123; <span class="number">200</span>, <span class="number">300</span> &#125;));</span><br><span class="line">game_obj_list.<span class="built_in">push_back</span>(sword_factory.<span class="built_in">create</span>(Attribute::Fire, &#123; <span class="number">200</span>, <span class="number">500</span> &#125;));</span><br><span class="line"></span><br><span class="line">game_obj_list.<span class="built_in">push_back</span>(slime_factory.<span class="built_in">create</span>(Attribute::Ice, &#123; <span class="number">425</span>, <span class="number">140</span> &#125;));</span><br><span class="line">game_obj_list.<span class="built_in">push_back</span>(slime_factory.<span class="built_in">create</span>(Attribute::Grass, &#123; <span class="number">425</span>, <span class="number">340</span> &#125;));</span><br><span class="line">game_obj_list.<span class="built_in">push_back</span>(slime_factory.<span class="built_in">create</span>(Attribute::Fire, &#123; <span class="number">425</span>, <span class="number">540</span> &#125;));</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">FactoryMethodPattern</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (GameObject* game_obj : game_obj_list)</span><br><span class="line"><span class="keyword">delete</span> game_obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">on_update</span><span class="params">(<span class="type">float</span> delta)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (GameObject* game_obj : game_obj_list)</span><br><span class="line">game_obj-&gt;<span class="built_in">on_update</span>(delta);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">on_render</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (GameObject* game_obj : game_obj_list)</span><br><span class="line">game_obj-&gt;<span class="built_in">on_render</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">std::vector&lt;GameObject*&gt; game_obj_list;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ol><li><b>解耦客户端与具体类依赖</b></li></ol><ul><li>将产品的代码与使用该产品的客户端内容进行分离</li><li><i>譬如在游戏开发中，玩家类只需要依赖具体工厂类，无需关注产品类内部实现与构造需求</i></li></ul><ol start="2"><li><b>提高系统的可扩展性</b></li></ol><ul><li>引入新产品无需修改已有代码</li><li><i>引入新产品时，只需要构建新的具体工厂类</i></li></ul><ol start="3"><li><b>封装复杂的对象创建逻辑</b></li></ol><ul><li>工厂内部屏蔽对象创建和初始化的复杂操作</li></ul><ol start="4"><li><p><b>遵循开闭原则和单一职责原则</b></p></li><li><p><b>提高可维护性</b></p></li></ol><ul><li>将对象创建的代码逻辑集中在一起方便后续修改维护</li></ul><div style="border-top: 3px solid black; font-weight: bold; margin: 20px 0;"></div><h3 id="抽象工厂方法"><a href="#抽象工厂方法" class="headerlink" title="抽象工厂方法"></a>抽象工厂方法</h3><h4 id="要素-1"><a href="#要素-1" class="headerlink" title="要素"></a>要素</h4><ol><li><b>抽象产品</b></li></ol><ul><li>提供一个接口，用于创建相关或依赖对象的家族，而无需指定具体类。</li></ul><ol><li><p><b>具体产品</b></p></li><li><p><b>抽象工厂</b></p></li><li><p><b>具体工厂</b></p></li></ol><p><b>示例代码</b></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//武器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Weapon</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">used</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//防具</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Armor</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">equited</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//剑</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sword</span> : <span class="keyword">public</span> Weapon</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">used</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;used sword&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//盾</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Shield</span> : <span class="keyword">public</span> Armor</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">equited</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;equited shield&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//法杖</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Staff</span> : <span class="keyword">public</span> Weapon</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">used</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;used staff&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//魔法书（法师防具）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpellBook</span> : <span class="keyword">public</span> Armor</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">equited</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;equited spellbook&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EquitmentFactory</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> Weapon* <span class="title">create_weapon</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> Armor* <span class="title">create_armor</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//战士工厂</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WarriorFactory</span> : <span class="keyword">public</span> EquitmentFactory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">Weapon* <span class="title">create_weapon</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Sword</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Armor* <span class="title">create_armor</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Shield</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//法师工厂</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MageFactory</span> : <span class="keyword">public</span> EquitmentFactory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">Weapon* <span class="title">create_weapon</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Staff</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Armor* <span class="title">create_armor</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">SpellBook</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Character</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Character</span>(EquitmentFactory* factory) :</span><br><span class="line"><span class="built_in">factory</span>(factory) &#123;&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Character</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">equit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Weapon* weapon = factory-&gt;<span class="built_in">create_weapon</span>();</span><br><span class="line">Armor* armor = factory-&gt;<span class="built_in">create_armor</span>();</span><br><span class="line"></span><br><span class="line">weapon-&gt;<span class="built_in">used</span>();</span><br><span class="line">armor-&gt;<span class="built_in">equited</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">EquitmentFactory* factory;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">EquitmentFactory* warrior_factory = <span class="keyword">new</span> <span class="built_in">WarriorFactory</span>();</span><br><span class="line"><span class="function">Character <span class="title">warrior</span><span class="params">(warrior_factory)</span></span>;</span><br><span class="line">warrior.<span class="built_in">equit</span>();</span><br><span class="line"></span><br><span class="line">EquitmentFactory* mage_factory = <span class="keyword">new</span> <span class="built_in">MageFactory</span>();</span><br><span class="line"><span class="function">Character <span class="title">mage</span><span class="params">(mage_factory)</span></span>;</span><br><span class="line">mage.<span class="built_in">equit</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><ol><li>在<a href="#%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F">工厂模式方法</a>基础上，有更多维度的定制化</li></ol><div style="border-top: 3px solid black; font-weight: bold; margin: 20px 0;"></div><h3 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h3><ul><li>可以叫做“生成器模式”，通常在复杂对象的构造中，把对象构造的逻辑从其本身的类中抽离出来，让专门的生成器来负责</li></ul><h4 id="要素-2"><a href="#要素-2" class="headerlink" title="要素"></a>要素</h4><ol><li><p><b>目标产品</b></p></li><li><p><b>抽象生成器</b></p></li></ol><ul><li>定义建造者的抽象接口</li></ul><ol start="3"><li><p><b>具体生成器</b></p></li><li><p><b>导演&#x2F;主管</b></p></li></ol><ul><li>代理调用生成器的各个建造步骤，如果对生成的步骤没有严格要求就可以省略</li></ul><p><b>示例代码</b></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//游戏关卡类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GameLevel</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">std::string level_name;</span><br><span class="line">std::vector&lt;std::string&gt; enemy_list;</span><br><span class="line">std::vector&lt;std::string&gt; item_list;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;run&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关卡生成器基类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LevelBuilder</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">set_level_name</span><span class="params">(<span class="type">const</span> std::string&amp; name)</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">add_enemy</span><span class="params">(<span class="type">const</span> std::string&amp; enemy)</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">add_item</span><span class="params">(<span class="type">const</span> std::string&amp; item)</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">set_mode</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> GameLevel* <span class="title">build</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//简单关卡生成器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EasyLevelBuilder</span> : <span class="keyword">public</span> LevelBuilder</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">EasyLevelBuilder</span>()</span><br><span class="line">&#123;</span><br><span class="line">game_level = <span class="keyword">new</span> <span class="built_in">GameLevel</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">set_level_name</span><span class="params">(<span class="type">const</span> std::string&amp; name)</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">game_level-&gt;level_name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_enemy</span><span class="params">(<span class="type">const</span> std::string&amp; enemy)</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">game_level-&gt;enemy_list.<span class="built_in">push_back</span>(enemy);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_item</span><span class="params">(<span class="type">const</span> std::string&amp; item)</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">game_level-&gt;item_list.<span class="built_in">push_back</span>(item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">set_mode</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">mode = <span class="string">&quot;easy&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">GameLevel* <span class="title">build</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> game_level;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">GameLevel* game_level;</span><br><span class="line">std::string mode;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//困难关卡生成器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HardLevelBuilder</span> : <span class="keyword">public</span> LevelBuilder</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">HardLevelBuilder</span>()</span><br><span class="line">&#123;</span><br><span class="line">game_level = <span class="keyword">new</span> <span class="built_in">GameLevel</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">set_level_name</span><span class="params">(<span class="type">const</span> std::string&amp; name)</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">game_level-&gt;level_name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_enemy</span><span class="params">(<span class="type">const</span> std::string&amp; enemy)</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">game_level-&gt;enemy_list.<span class="built_in">push_back</span>(enemy);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_item</span><span class="params">(<span class="type">const</span> std::string&amp; item)</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">game_level-&gt;item_list.<span class="built_in">push_back</span>(item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">set_mode</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">mode = <span class="string">&quot;hard&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">GameLevel* <span class="title">build</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> game_level;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">GameLevel* game_level;</span><br><span class="line">std::string mode;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关卡导演类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GameLevelDirector</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">GameLevelDirector</span>(LevelBuilder* level_build)</span><br><span class="line">:<span class="built_in">level_build</span>(level_build)&#123;&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">GameLevelDirector</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">GameLevel* <span class="title">create_easy_level_1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">level_build-&gt;<span class="built_in">set_level_name</span>(<span class="string">&quot;Swamp&quot;</span>);</span><br><span class="line">level_build-&gt;<span class="built_in">set_mode</span>();</span><br><span class="line">level_build-&gt;<span class="built_in">add_enemy</span>(<span class="string">&quot;Slime&quot;</span>);</span><br><span class="line">level_build-&gt;<span class="built_in">add_enemy</span>(<span class="string">&quot;Slime&quot;</span>);</span><br><span class="line">level_build-&gt;<span class="built_in">add_enemy</span>(<span class="string">&quot;Wolf&quot;</span>);</span><br><span class="line">level_build-&gt;<span class="built_in">add_item</span>(<span class="string">&quot;Apple&quot;</span>);</span><br><span class="line">level_build-&gt;<span class="built_in">add_item</span>(<span class="string">&quot;Sword&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> level_build-&gt;<span class="built_in">build</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">GameLevel* <span class="title">create_easy_level_2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">level_build-&gt;<span class="built_in">set_level_name</span>(<span class="string">&quot;Forest&quot;</span>);</span><br><span class="line">level_build-&gt;<span class="built_in">add_enemy</span>(<span class="string">&quot;Slime&quot;</span>);</span><br><span class="line">level_build-&gt;<span class="built_in">add_enemy</span>(<span class="string">&quot;Wolf&quot;</span>);</span><br><span class="line">level_build-&gt;<span class="built_in">add_enemy</span>(<span class="string">&quot;Goblin&quot;</span>);</span><br><span class="line">level_build-&gt;<span class="built_in">add_item</span>(<span class="string">&quot;Stone&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> level_build-&gt;<span class="built_in">build</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">GameLevel* <span class="title">create_hard_level_1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">level_build-&gt;<span class="built_in">set_level_name</span>(<span class="string">&quot;Swamp&quot;</span>);</span><br><span class="line">level_build-&gt;<span class="built_in">set_mode</span>();</span><br><span class="line">level_build-&gt;<span class="built_in">add_enemy</span>(<span class="string">&quot;Slime&quot;</span>);</span><br><span class="line">level_build-&gt;<span class="built_in">add_enemy</span>(<span class="string">&quot;Slime&quot;</span>);</span><br><span class="line">level_build-&gt;<span class="built_in">add_enemy</span>(<span class="string">&quot;Wolf&quot;</span>);</span><br><span class="line">level_build-&gt;<span class="built_in">add_enemy</span>(<span class="string">&quot;Goblin&quot;</span>);</span><br><span class="line">level_build-&gt;<span class="built_in">add_enemy</span>(<span class="string">&quot;Wolf&quot;</span>);</span><br><span class="line">level_build-&gt;<span class="built_in">add_item</span>(<span class="string">&quot;Apple&quot;</span>);</span><br><span class="line">level_build-&gt;<span class="built_in">add_item</span>(<span class="string">&quot;Sword&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> level_build-&gt;<span class="built_in">build</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">GameLevel* <span class="title">create_hard_level_2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">level_build-&gt;<span class="built_in">set_level_name</span>(<span class="string">&quot;Swamp&quot;</span>);</span><br><span class="line">level_build-&gt;<span class="built_in">set_mode</span>();</span><br><span class="line">level_build-&gt;<span class="built_in">add_enemy</span>(<span class="string">&quot;Slime&quot;</span>);</span><br><span class="line">level_build-&gt;<span class="built_in">add_enemy</span>(<span class="string">&quot;Goblin&quot;</span>);</span><br><span class="line">level_build-&gt;<span class="built_in">add_enemy</span>(<span class="string">&quot;Goblin&quot;</span>);</span><br><span class="line">level_build-&gt;<span class="built_in">add_enemy</span>(<span class="string">&quot;Wolf&quot;</span>);</span><br><span class="line">level_build-&gt;<span class="built_in">add_enemy</span>(<span class="string">&quot;Wolf&quot;</span>);</span><br><span class="line">level_build-&gt;<span class="built_in">add_item</span>(<span class="string">&quot;Apple&quot;</span>);</span><br><span class="line">level_build-&gt;<span class="built_in">add_item</span>(<span class="string">&quot;Sword&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> level_build-&gt;<span class="built_in">build</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">LevelBuilder* level_build;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BuilderPattern</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">BuilderPattern</span>()</span><br><span class="line">&#123;</span><br><span class="line">easy_dir = <span class="keyword">new</span> <span class="built_in">GameLevelDirector</span>(<span class="keyword">new</span> <span class="built_in">EasyLevelBuilder</span>());</span><br><span class="line">easy_dir-&gt;<span class="built_in">create_easy_level_1</span>();</span><br><span class="line">easy_dir-&gt;<span class="built_in">create_easy_level_2</span>();</span><br><span class="line"></span><br><span class="line">hard_dir = <span class="keyword">new</span> <span class="built_in">GameLevelDirector</span>(<span class="keyword">new</span> <span class="built_in">HardLevelBuilder</span>());</span><br><span class="line">hard_dir-&gt;<span class="built_in">create_hard_level_1</span>();</span><br><span class="line">hard_dir-&gt;<span class="built_in">create_hard_level_2</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">BuilderPattern</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">GameLevelDirector* easy_dir;</span><br><span class="line">GameLevelDirector* hard_dir;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h4><ol><li><b>简化构造参数</b></li></ol><ul><li>拆分单个类的构造任务到多个生成器步骤，避免构造产品对象时需要过多的构造参数</li></ul><ol start="2"><li><b>灵活组合步骤</b></li></ol><ul><li>解耦构造过程，从而使用组合灵活地产出更多变种的产品</li></ul><ol start="3"><li><b>动态感知构造过程</b></li></ol><ul><li>导演类可以看作是对构造器的屏蔽与封装，借助导演类可以在运行时根据建造过程调整各部分任务，暂缓创建或执行递归构造</li></ul><div style="border-top: 3px solid black; font-weight: bold; margin: 20px 0;"></div><h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><ul><li>通过复制现有对象来创建新对象，而不是通过实例化类来创建新对象</li><li><i>适用于创建大量相似对象的场景，避免了重复的初始化和构造过程</i></li></ul><h4 id="要素-3"><a href="#要素-3" class="headerlink" title="要素"></a>要素</h4><ol><li><p><b>原型接口</b></p></li><li><p><b>具体原型</b></p></li></ol><p><b>示例代码</b></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 原型接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Prototype</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> Prototype* <span class="title">clone</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>;<span class="comment">// 克隆</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">showInfo</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>;<span class="comment">// 显示信息</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Soldier</span> : <span class="keyword">public</span> Prototype</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Soldier</span>(std::string type, <span class="type">int</span> health, <span class="type">int</span> attack, <span class="type">int</span> defense)</span><br><span class="line">: <span class="built_in">type</span>(type), <span class="built_in">health</span>(health), <span class="built_in">attack</span>(attack), <span class="built_in">defense</span>(defense) &#123;&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Soldier</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Prototype* <span class="title">clone</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Soldier</span>(*<span class="keyword">this</span>);<span class="comment">// 调用自身拷贝构造函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showInfo</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;type:&quot;</span> &lt;&lt; type &lt;&lt; <span class="string">&quot; health:&quot;</span> &lt;&lt; health</span><br><span class="line">&lt;&lt; <span class="string">&quot; attack:&quot;</span> &lt;&lt; attack &lt;&lt; <span class="string">&quot; defense:&quot;</span> &lt;&lt; defense &lt;&lt; std::endl;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">std::string type;</span><br><span class="line"><span class="type">int</span> health;</span><br><span class="line"><span class="type">int</span> attack;</span><br><span class="line"><span class="type">int</span> defense;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Archer</span> : <span class="keyword">public</span> Prototype</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Archer</span>(std::string type, <span class="type">int</span> health, <span class="type">int</span> attack, <span class="type">int</span> defense)</span><br><span class="line">: <span class="built_in">type</span>(type), <span class="built_in">health</span>(health), <span class="built_in">attack</span>(attack), <span class="built_in">defense</span>(defense) &#123;&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Archer</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Prototype* <span class="title">clone</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Archer</span>(*<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showInfo</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;type:&quot;</span> &lt;&lt; type &lt;&lt; <span class="string">&quot; health:&quot;</span> &lt;&lt; health</span><br><span class="line">&lt;&lt; <span class="string">&quot; attack:&quot;</span> &lt;&lt; attack &lt;&lt; <span class="string">&quot; defense:&quot;</span> &lt;&lt; defense &lt;&lt; std::endl;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">std::string type;</span><br><span class="line"><span class="type">int</span> health;</span><br><span class="line"><span class="type">int</span> attack;</span><br><span class="line"><span class="type">int</span> defense;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Knight</span> : <span class="keyword">public</span> Prototype</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Knight</span>(std::string type, <span class="type">int</span> health, <span class="type">int</span> attack, <span class="type">int</span> defense)</span><br><span class="line">: <span class="built_in">type</span>(type), <span class="built_in">health</span>(health), <span class="built_in">attack</span>(attack), <span class="built_in">defense</span>(defense) &#123;&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Knight</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Prototype* <span class="title">clone</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Knight</span>(*<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showInfo</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;type:&quot;</span> &lt;&lt; type &lt;&lt; <span class="string">&quot; health:&quot;</span> &lt;&lt; health</span><br><span class="line">&lt;&lt; <span class="string">&quot; attack:&quot;</span> &lt;&lt; attack &lt;&lt; <span class="string">&quot; defense:&quot;</span> &lt;&lt; defense &lt;&lt; std::endl;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">std::string type;</span><br><span class="line"><span class="type">int</span> health;</span><br><span class="line"><span class="type">int</span> attack;</span><br><span class="line"><span class="type">int</span> defense;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Soldier* soldierPrototype = <span class="keyword">new</span> <span class="built_in">Soldier</span>(<span class="string">&quot;Infantry&quot;</span>, <span class="number">100</span>, <span class="number">10</span>, <span class="number">5</span>);</span><br><span class="line">Archer* soldierPrototype = <span class="keyword">new</span> <span class="built_in">Archer</span>(<span class="string">&quot;Longbow&quot;</span>, <span class="number">80</span>, <span class="number">15</span>, <span class="number">3</span>);</span><br><span class="line">Knight* soldierPrototype = <span class="keyword">new</span> <span class="built_in">Knight</span>(<span class="string">&quot;Cavalry&quot;</span>, <span class="number">150</span>, <span class="number">20</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">Prototype* clone_soldier = soldierPrototype-&gt;<span class="built_in">clone</span>();</span><br><span class="line">Prototype* clone_archer = soldierPrototype-&gt;<span class="built_in">clone</span>();</span><br><span class="line">Prototype* clone_knight = soldierPrototype-&gt;<span class="built_in">clone</span>();</span><br><span class="line"></span><br><span class="line">clone_soldier-&gt;<span class="built_in">showInfo</span>();</span><br><span class="line">clone_archer-&gt;<span class="built_in">showInfo</span>();</span><br><span class="line">clone_knight-&gt;<span class="built_in">showInfo</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优点-3"><a href="#优点-3" class="headerlink" title="优点"></a>优点</h4><ol><li><p><b>避免重复初始化，提升性能</b></p></li><li><p><b>动态生成对象副本，支持运行时配置</b></p></li></ol><h4 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h4><ol><li><b>为何不直接使用拷贝构造函数</b></li></ol><ul><li>拷贝构造函数是静态实现，要使用拷贝构造函数时需要知道具体的类；而原型模式是动态实现的，使用原型模式时只需要知道原型接口即可</li><li>拷贝构造函数涉及到浅拷贝和深拷贝，除去内存上的问题，若不保留原型直接使用场内原有的对象进行拷贝，容易拷贝多余的对象状态造成污染</li></ul><ol start="2"><li><b>为何不能在类外手动调用拷贝类内字段</b></li></ol><ul><li>私有字段不宜访问，会产生依赖；而原型模式可以通过原型接口来实现对类内字段的访问和操作</li><li>面对复杂字段的对象非常繁琐，会增加人为失误的可能</li><li>这种方法同样需要知晓具体子类，产生不必要的依赖</li></ul><div style="border-top: 3px solid black; font-weight: bold; margin: 20px 0;"></div><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><ul><li>确保一个类只有一个实例，并提供一个全局访问点，为静态变量的生命周期。分为懒汉模式和饿汉模式</li><li><i>懒汉模式：在类加载时单例对象为空，在第一次使用时创建实例，对比饿汉模式更加节省空间，可能存在多线程隐患</i></li><li><i>饿汉模式：在类加载时创建实例，对外提供静态方法来获取单例对象的引用</i></li></ul><h4 id="要素-4"><a href="#要素-4" class="headerlink" title="要素"></a>要素</h4><ol><li><b>单例对象</b></li></ol><p><b>示例代码（懒汉模式）</b></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 懒汉模式</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Manager</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">static</span> Manager* <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!instance)<span class="comment">// 第一次使用时创建实例</span></span><br><span class="line">instance = <span class="keyword">new</span> <span class="built_in">Manager</span>();</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write_note</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;note&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="built_in">Manager</span>()</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;create manager&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Manager</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Manager</span>(<span class="type">const</span> Manager&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">Manager&amp; <span class="keyword">operator</span>=(<span class="type">const</span> Manager&amp;) = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">static</span> Manager* instance;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Manager::<span class="built_in">getInstance</span>()-&gt;<span class="built_in">write_note</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><b>示例代码（饿汉模式）</b></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 饿汉模式</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Manager</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">static</span> Manager&amp; <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write_note</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;note&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="built_in">Manager</span>()</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;create manager&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Manager</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Manager</span>(<span class="type">const</span> Manager&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">Manager&amp; <span class="keyword">operator</span>=(<span class="type">const</span> Manager&amp;) = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">static</span> Manager instance;<span class="comment">// 类加载时创建实例</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Manager::<span class="built_in">getInstance</span>().<span class="built_in">write_note</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="优点-4"><a href="#优点-4" class="headerlink" title="优点"></a>优点</h4><ol><li><b>严格保证只有一个实例</b></li></ol><ul><li>通过私有化构造函数和静态方法来控制实例的创建</li></ul><div style="border-top: 3px solid black; font-weight: bold; margin: 20px 0;"></div><h3 id="创造型设计模式对比"><a href="#创造型设计模式对比" class="headerlink" title="创造型设计模式对比"></a>创造型设计模式对比</h3><table><thead><tr><th align="left">模式名称</th><th align="left">核心目标</th></tr></thead><tbody><tr><td align="left"><a href="#%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F">工厂方法</a></td><td align="left">子类决定实例化哪个类</td></tr><tr><td align="left"><a href="#%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95">抽象工厂</a></td><td align="left">创建相关或依赖对象的家族，而无需指定具体类</td></tr><tr><td align="left"><a href="#%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F">建造者</a></td><td align="left">分步骤构建复杂对象</td></tr><tr><td align="left"><a href="#%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F">原型</a></td><td align="left">通过复制现有对象来创建新对象</td></tr><tr><td align="left"><a href="#%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F">单例</a></td><td align="left">确保一个类只有一个实例，并提供一个全局访问点</td></tr></tbody></table><div style="border-top: 3px solid black; font-weight: bold; margin: 20px 0;"></div><h2 id="结构型"><a href="#结构型" class="headerlink" title="结构型"></a>结构型</h2><h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><ul><li>将一个类的接口转换成客户希望的另一个接口，使得原本由于接口不兼容而不能一起工作的类可以一起工作</li><li><i>利用继承适配不同接口</i></li></ul><h4 id="要素-5"><a href="#要素-5" class="headerlink" title="要素"></a>要素</h4><ol><li><b>目标接口</b></li></ol><ul><li>客户需要调用的接口</li></ul><ol start="2"><li><b>原接口</b></li></ol><ul><li>需要由适配器适配（兼容）的接口</li></ul><ol start="3"><li><b>适配器类</b></li></ol><ul><li>提供兼容层，避免客户端代码直接依赖不同的对象</li><li>可以对底层的输入设备指令进行翻译，对客户端暴露更贴近逻辑的接口</li></ul><p><b>示例代码</b></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GameObject</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;health:&quot;</span> &lt;&lt; health &lt;&lt; <span class="string">&quot; speed:&quot;</span> &lt;&lt; speed &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> health;</span><br><span class="line"><span class="type">float</span> speed;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 适配器接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoaderImpl</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">bool</span> <span class="title">load</span><span class="params">(std::vector&lt;GameObject*&gt; list, <span class="type">const</span> std::string&amp; path)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JSONLoader</span> : <span class="keyword">public</span> LoaderImpl</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">load</span><span class="params">(std::vector&lt;GameObject*&gt; list, <span class="type">const</span> std::string&amp; path)</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;解析JSON到dst&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">XMLLoader</span> : <span class="keyword">public</span> LoaderImpl</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">load</span><span class="params">(std::vector&lt;GameObject*&gt; list, <span class="type">const</span> std::string&amp; path)</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;解析XML到dst&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端代码</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AdapterPattern</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">AdapterPattern</span>() = <span class="keyword">default</span>;</span><br><span class="line">~<span class="built_in">AdapterPattern</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">XMLLoader xml_loader;</span><br><span class="line">JSONLoader json_loader;</span><br><span class="line">std::vector&lt;GameObject*&gt; game_object_list;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">reload</span><span class="params">(LoaderImpl* loader, <span class="type">const</span> std::string&amp; path)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">game_object_list.<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">if</span> (!loader-&gt;<span class="built_in">load</span>(game_object_list, path))<span class="comment">// 此处客户端调用了统一的接口</span></span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;错误：游戏对象加载失败&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="优点-5"><a href="#优点-5" class="headerlink" title="优点"></a>优点</h4><ol><li><b>符合单一职责原则和开闭原则</b></li><li><b>灵活，可以方便地增删适配器</b></li></ol><div style="border-top: 3px solid black; font-weight: bold; margin: 20px 0;"></div><h3 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h3><ul><li>将抽象部分与实现部分分离，使它们可以独立地变化</li></ul><h4 id="要素-6"><a href="#要素-6" class="headerlink" title="要素"></a>要素</h4><ol><li><b>抽象类</b></li><li><b>扩展抽象类</b></li><li><b>实现类接口</b></li><li><b>具体实现类</b></li></ol><p><b>示例代码</b></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Renderer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">draw_shape</span><span class="params">(<span class="type">const</span> std::string&amp; shape)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OpenGLRenderer</span> : <span class="keyword">public</span> Renderer</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">draw_shape</span><span class="params">(<span class="type">const</span> std::string&amp; shape)</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;使用OpenGL绘制&quot;</span> &lt;&lt; shape &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DirectXRenderer</span> : <span class="keyword">public</span> Renderer</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">draw_shape</span><span class="params">(<span class="type">const</span> std::string&amp; shape)</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;使用DirectX绘制&quot;</span> &lt;&lt; shape &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Shape</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Shape</span>(Renderer* renderer)</span><br><span class="line">: <span class="built_in">renderer</span>(renderer) &#123;&#125;</span><br><span class="line">~<span class="built_in">Shape</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">draw</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">Renderer* renderer;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> : <span class="keyword">public</span> Shape</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Circle</span>(Renderer* renderer) : <span class="built_in">Shape</span>(renderer) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">draw</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">renderer-&gt;<span class="built_in">draw_shape</span>(<span class="string">&quot;Circle&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> : <span class="keyword">public</span> Shape</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Rectangle</span>(Renderer* renderer) : <span class="built_in">Shape</span>(renderer) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">draw</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">renderer-&gt;<span class="built_in">draw_shape</span>(<span class="string">&quot;Rectangle&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Renderer* openglRenderer = <span class="keyword">new</span> <span class="built_in">OpenGLRenderer</span>();</span><br><span class="line">Renderer* directxRenderer = <span class="keyword">new</span> <span class="built_in">DirectXRenderer</span>();</span><br><span class="line"></span><br><span class="line">Shape* circle = <span class="keyword">new</span> <span class="built_in">Circle</span>(openglRenderer);</span><br><span class="line">Shape* rectangle = <span class="keyword">new</span> <span class="built_in">Rectangle</span>(directxRenderer);</span><br><span class="line"></span><br><span class="line">circle-&gt;<span class="built_in">draw</span>();</span><br><span class="line">rectangle-&gt;<span class="built_in">draw</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="优点-6"><a href="#优点-6" class="headerlink" title="优点"></a>优点</h4><ol><li><b>符合单一职责原则和开闭原则</b></li><li><b>分离抽象和实现，提高灵活性</b></li><li><b>隐藏了实现细节</b></li></ol><h4 id="思考-1"><a href="#思考-1" class="headerlink" title="思考"></a>思考</h4><ol><li><b>桥接模式和<a href="#%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F">工厂方法模式</a></b></li></ol><ul><li>工厂方法模式关注的是对象的创建，根据不同条件动态创建不同产品</li><li>桥接模式关注的是对象的实现和抽象的分离，两者可以独立变化实现解耦</li><li>二者可以结合使用，工厂方法模式可以用于创建桥接模式中的实现类，而桥接模式可以用于创建工厂方法模式中的抽象类</li></ul><p><b>示例代码</b></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Renderer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">draw_shape</span><span class="params">(<span class="type">const</span> std::string&amp; shape)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OpenGLRenderer</span> : <span class="keyword">public</span> Renderer</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">draw_shape</span><span class="params">(<span class="type">const</span> std::string&amp; shape)</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;使用OpenGL绘制&quot;</span> &lt;&lt; shape &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DirectXRenderer</span> : <span class="keyword">public</span> Renderer</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">draw_shape</span><span class="params">(<span class="type">const</span> std::string&amp; shape)</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;使用DirectX绘制&quot;</span> &lt;&lt; shape &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Shape</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Shape</span>(Renderer* renderer)</span><br><span class="line">: <span class="built_in">renderer</span>(renderer) &#123;&#125;</span><br><span class="line">~<span class="built_in">Shape</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">draw</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">Renderer* renderer;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> : <span class="keyword">public</span> Shape</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Circle</span>(Renderer* renderer) : <span class="built_in">Shape</span>(renderer) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">draw</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">renderer-&gt;<span class="built_in">draw_shape</span>(<span class="string">&quot;Circle&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> : <span class="keyword">public</span> Shape</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Rectangle</span>(Renderer* renderer) : <span class="built_in">Shape</span>(renderer) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">draw</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">renderer-&gt;<span class="built_in">draw_shape</span>(<span class="string">&quot;Rectangle&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用工厂模式创建Renderer对象</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RendererFactory</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> Renderer* <span class="title">createRenderer</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OpenGlRendererFactory</span> : <span class="keyword">public</span> RendererFactory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">Renderer* <span class="title">createRenderer</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">OpenGLRenderer</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DirectXRendererFactory</span> : <span class="keyword">public</span> RendererFactory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">Renderer* <span class="title">createRenderer</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">DirectXRenderer</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">RendererFactory* factory = <span class="keyword">new</span> <span class="built_in">OpenGlRendererFactory</span>();</span><br><span class="line">Renderer* renderer = factory-&gt;<span class="built_in">createRenderer</span>();</span><br><span class="line"></span><br><span class="line">Shape* circle = <span class="keyword">new</span> <span class="built_in">Circle</span>(renderer);</span><br><span class="line">Shape* rectangle = <span class="keyword">new</span> <span class="built_in">Rectangle</span>(renderer);</span><br><span class="line"></span><br><span class="line">circle-&gt;<span class="built_in">draw</span>();</span><br><span class="line">rectangle-&gt;<span class="built_in">draw</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li><b>桥接模式和适配器模式</b></li></ol><ul><li>桥接模式关注抽象与实现分离，通过组合来代替继承，允许独立变化</li><li><i>桥接模式类似于将实现类作为适配器模式的客户端，在适配器模式上进一步地扩展</i></li><li>适配器模式关注接口的转换（统一），通过继承的方式来实现不同接口之间的适配</li></ul><div style="border-top: 3px solid black; font-weight: bold; margin: 20px 0;"></div><h3 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h3><ul><li>将对象组合成树形结构以表示“部分-整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性</li></ul><h4 id="要素-7"><a href="#要素-7" class="headerlink" title="要素"></a>要素</h4><ol><li><b>组件接口</b></li></ol><ul><li>定义所有叶子节点和复合节点的公共接口</li></ul><ol start="2"><li><b>叶子节点</b></li></ol><ul><li>具体的对象，不能再包含其他对象，类似于数据结构中树的叶子节点</li></ul><ol start="3"><li><b>复合节点</b></li></ol><ul><li>包含一个或多个子节点的对象，提供子树的管理接口，客户端只需要关注最顶层的复合节点即可</li></ul><p><b>示例代码</b></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 游戏元素，实现自身逻辑并充当了容器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GameObject</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_child</span><span class="params">(GameObject* child)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">childList.<span class="built_in">emplace_back</span>(child);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">on_update</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (GameObject* go : childList)</span><br><span class="line">go-&gt;<span class="built_in">on_update</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">std::vector&lt;GameObject*&gt; childList;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sprite</span> : <span class="keyword">public</span> GameObject</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">on_update</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;sprite on_update&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">GameObject::<span class="built_in">on_update</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Music</span> : <span class="keyword">public</span> GameObject</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">on_update</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;music on_update&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">GameObject::<span class="built_in">on_update</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 玩家和敌人添加画面和音乐子对象</span></span><br><span class="line">GameObject* player = <span class="keyword">new</span> <span class="built_in">GameObject</span>();</span><br><span class="line">player-&gt;<span class="built_in">add_child</span>(<span class="keyword">new</span> <span class="built_in">Sprite</span>());</span><br><span class="line">player-&gt;<span class="built_in">add_child</span>(<span class="keyword">new</span> <span class="built_in">Music</span>());</span><br><span class="line"></span><br><span class="line">GameObject* enemy = <span class="keyword">new</span> <span class="built_in">GameObject</span>();</span><br><span class="line">enemy-&gt;<span class="built_in">add_child</span>(<span class="keyword">new</span> <span class="built_in">Sprite</span>());</span><br><span class="line">enemy-&gt;<span class="built_in">add_child</span>(<span class="keyword">new</span> <span class="built_in">Music</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 场景添加玩家和敌人子对象</span></span><br><span class="line">GameObject* scene = <span class="keyword">new</span> <span class="built_in">GameObject</span>();</span><br><span class="line">scene-&gt;<span class="built_in">add_child</span>(player);</span><br><span class="line">scene-&gt;<span class="built_in">add_child</span>(enemy);</span><br><span class="line"></span><br><span class="line">scene-&gt;<span class="built_in">on_update</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="优点-7"><a href="#优点-7" class="headerlink" title="优点"></a>优点</h4><ol><li><b>简化客户端代码，统一处理简单和复杂元素</b></li><li><b>支持递归组合，灵活扩展结构</b></li></ol><div style="border-top: 3px solid black; font-weight: bold; margin: 20px 0;"></div><h3 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h3><ul><li>动态地给一个对象添加一些额外的职责，装饰模式提供了比继承更灵活的替代方案</li><li><i>装饰器模式可以在不改变对象自身的情况下，动态地添加功能</i></li></ul><h4 id="要素-8"><a href="#要素-8" class="headerlink" title="要素"></a>要素</h4><ol><li><b>组件接口</b></li><li><b>具体组件</b></li><li><b>装饰器接口</b></li><li><b>具体装饰器</b></li></ol><p><b>示例代码</b></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Player</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">get_power</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> power;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">set_power</span><span class="params">(<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">power = val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">get_defense</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> defense;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">set_defense</span><span class="params">(<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">defense = val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">on_update</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="type">int</span> power;</span><br><span class="line"><span class="type">int</span> defense;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BasePlayer</span> : <span class="keyword">public</span> Player</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">BasePlayer</span>()</span><br><span class="line">&#123;</span><br><span class="line">power = <span class="number">2</span>;</span><br><span class="line">defense = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">BasePlayer</span>() = <span class="keyword">default</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PowerUpDecorator</span> : <span class="keyword">public</span> Player</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">PowerUpDecorator</span>(Player* player)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;player = player;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">PowerUpDecorator</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_power</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> player-&gt;<span class="built_in">get_power</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_defense</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> player-&gt;<span class="built_in">get_defense</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">set_power</span><span class="params">(<span class="type">int</span> val)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">player-&gt;<span class="built_in">set_power</span>(val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">set_defense</span><span class="params">(<span class="type">int</span> val)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">player-&gt;<span class="built_in">set_defense</span>(val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">on_update</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">player-&gt;<span class="built_in">set_power</span>(<span class="number">4</span>);</span><br><span class="line">player-&gt;<span class="built_in">on_update</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Player* player;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DefenseUpDecorator</span> : <span class="keyword">public</span> Player</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">DefenseUpDecorator</span>(Player* player)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;player = player;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">DefenseUpDecorator</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_power</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> player-&gt;<span class="built_in">get_power</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_defense</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> player-&gt;<span class="built_in">get_defense</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">set_power</span><span class="params">(<span class="type">int</span> val)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">player-&gt;<span class="built_in">set_power</span>(val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">set_defense</span><span class="params">(<span class="type">int</span> val)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">player-&gt;<span class="built_in">set_defense</span>(val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">on_update</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">player-&gt;<span class="built_in">set_defense</span>(<span class="number">20</span>);</span><br><span class="line">player-&gt;<span class="built_in">on_update</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Player* player;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Player* player = <span class="keyword">new</span> <span class="built_in">BasePlayer</span>();</span><br><span class="line">player = <span class="keyword">new</span> <span class="built_in">PowerUpDecorator</span>(player);</span><br><span class="line">player-&gt;<span class="built_in">on_update</span>();</span><br><span class="line">std::cout &lt;&lt; player-&gt;<span class="built_in">get_power</span>() &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; player-&gt;<span class="built_in">get_defense</span>() &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">player = <span class="keyword">new</span> <span class="built_in">DefenseUpDecorator</span>(player);<span class="comment">//嵌套</span></span><br><span class="line">player-&gt;<span class="built_in">on_update</span>();</span><br><span class="line">std::cout &lt;&lt; player-&gt;<span class="built_in">get_power</span>() &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; player-&gt;<span class="built_in">get_defense</span>() &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">player = <span class="keyword">new</span> <span class="built_in">BasePlayer</span>();<span class="comment">//还原</span></span><br><span class="line">player-&gt;<span class="built_in">on_update</span>();</span><br><span class="line">std::cout &lt;&lt; player-&gt;<span class="built_in">get_power</span>() &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; player-&gt;<span class="built_in">get_defense</span>() &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="优点-8"><a href="#优点-8" class="headerlink" title="优点"></a>优点</h4><ol><li><b>无需创建新的子类来扩展功能</b></li><li><b>灵活，可以动态添加或删除装饰</b></li><li><b>符合单一职责原则</b></li></ol><div style="border-top: 3px solid black; font-weight: bold; margin: 20px 0;"></div><h3 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h3><ul><li>可以为子系统提供一个简化的接口，来减少客户端与子系统之间的交互的复杂性</li></ul><h4 id="要素-9"><a href="#要素-9" class="headerlink" title="要素"></a>要素</h4><ol><li><b>外观类</b></li></ol><ul><li>提供统一接口，供客户端调用</li></ul><ol start="2"><li><b>子系统类</b></li></ol><ul><li>具体实现类，提供具体的功能实现</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子系统类：CPU</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CPU</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123; <span class="comment">/* 启动 CPU */</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子系统类：内存</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Memory</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">load</span><span class="params">()</span> </span>&#123; <span class="comment">/* 加载内存 */</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 外观类：计算机启动器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ComputerFacade</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    CPU* cpu;</span><br><span class="line">    Memory* memory;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">ComputerFacade</span>() : <span class="built_in">cpu</span>(<span class="keyword">new</span> <span class="built_in">CPU</span>()), <span class="built_in">memory</span>(<span class="keyword">new</span> <span class="built_in">Memory</span>()) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">start</span><span class="params">()</span> <span class="comment">// 统一接口</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        cpu-&gt;<span class="built_in">start</span>();</span><br><span class="line">        memory-&gt;<span class="built_in">load</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="优点-9"><a href="#优点-9" class="headerlink" title="优点"></a>优点</h4><ol><li><b>简明，同时让代码独立于复杂子系统</b></li></ol><div style="border-top: 3px solid black; font-weight: bold; margin: 20px 0;"></div><h3 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h3><ul><li>通过共享对象来支持大量细粒度的对象，减少内存使用和提高性能</li></ul><h4 id="要素-10"><a href="#要素-10" class="headerlink" title="要素"></a>要素</h4><ol><li><b>享元</b></li></ol><ul><li>多个对象共享的数据或状态</li></ul><ol start="2"><li><b>享元工厂</b></li></ol><ul><li>负责创建和管理享元对象，确保共享的对象是唯一的</li></ul><ol start="3"><li><b>上下文</b></li></ol><ul><li>享元对象的外部状态，通常是不可共享的状态</li></ul><p><i>示例代码仅完成了享元部分</i><br><b>示例代码（资源管理器头文件）</b></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _RESOURCES_MANAGER_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _RESOURCES_MANAGER_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;font_wrapper.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;SDL.h&gt;</span><span class="comment">// SDL2内容</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;SDL_ttf.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;SDL_mixer.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;filesystem&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ResourcesManager</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">using</span> ResIDList = std::vector&lt;std::string&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">static</span> ResourcesManager* <span class="title">instance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!manager)</span><br><span class="line">manager = <span class="keyword">new</span> <span class="built_in">ResourcesManager</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> manager;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">load</span><span class="params">(SDL_Renderer* renderer)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">FontWrapper* <span class="title">find_font</span><span class="params">(<span class="type">const</span> std::string&amp; id)</span> </span>&#123; <span class="keyword">return</span> font_pool[id]; &#125;</span><br><span class="line"><span class="function">Mix_Chunk* <span class="title">find_audio</span><span class="params">(<span class="type">const</span> std::string&amp; id)</span> </span>&#123; <span class="keyword">return</span> audio_pool[id]; &#125;</span><br><span class="line"><span class="function">SDL_Texture* <span class="title">find_texture</span><span class="params">(<span class="type">const</span> std::string&amp; id)</span> </span>&#123; <span class="keyword">return</span> texture_pool[id]; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">const</span> ResIDList&amp; <span class="title">get_font_resid_list</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> font_resid_list; &#125;</span><br><span class="line"><span class="function"><span class="type">const</span> ResIDList&amp; <span class="title">get_audio_resid_list</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> audio_resid_list; &#125;</span><br><span class="line"><span class="function"><span class="type">const</span> ResIDList&amp; <span class="title">get_texture_resid_list</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> texture_resid_list; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">static</span> ResourcesManager* manager;</span><br><span class="line">SDL_Renderer* renderer = <span class="literal">nullptr</span>;</span><br><span class="line">std::unordered_map&lt;std::string, FontWrapper*&gt; font_pool;<span class="comment">// 字体池，共享数据，以下同理</span></span><br><span class="line">std::unordered_map&lt;std::string, Mix_Chunk*&gt; audio_pool;</span><br><span class="line">std::unordered_map&lt;std::string, SDL_Texture*&gt; texture_pool;</span><br><span class="line">ResIDList font_resid_list, audio_resid_list, texture_resid_list;</span><br><span class="line">std::unordered_map&lt;std::string, std::function&lt;<span class="type">void</span>(<span class="type">const</span> std::filesystem::path&amp; path)&gt;&gt; loader_pool;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">ResourcesManager</span>();</span><br><span class="line">~<span class="built_in">ResourcesManager</span>();</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// !_RESOURCES_MANAGER_H_</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><b>示例代码（资源管理器实现文件）</b></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;resources_manager.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;SDL_image.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">ResourcesManager* ResourcesManager::manager = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ResourcesManager::load</span><span class="params">(SDL_Renderer* renderer)</span><span class="comment">// 资源（动态）加载函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> std::filesystem;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>-&gt;renderer = renderer;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; entry : <span class="built_in">directory_iterator</span>(<span class="string">&quot;resources&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (entry.<span class="built_in">is_regular_file</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">const</span> path&amp; path = entry.<span class="built_in">path</span>();</span><br><span class="line">            <span class="keyword">auto</span> itor = loader_pool.<span class="built_in">find</span>(path.<span class="built_in">extension</span>().<span class="built_in">u8string</span>());</span><br><span class="line">            <span class="keyword">if</span> (itor != loader_pool.<span class="built_in">end</span>())</span><br><span class="line">                itor-&gt;<span class="built_in">second</span>(path);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ResourcesManager::<span class="built_in">ResourcesManager</span>()</span><br><span class="line">&#123;</span><br><span class="line">    loader_pool[<span class="string">&quot;.jpg&quot;</span>] = loader_pool[<span class="string">&quot;.png&quot;</span>] =</span><br><span class="line">        [&amp;](<span class="type">const</span> std::filesystem::path&amp; path)</span><br><span class="line">        &#123;</span><br><span class="line">            SDL_Texture* texture = <span class="built_in">IMG_LoadTexture</span>(renderer, path.<span class="built_in">u8string</span>().<span class="built_in">c_str</span>());</span><br><span class="line">            texture_resid_list.<span class="built_in">push_back</span>(path.<span class="built_in">stem</span>().<span class="built_in">u8string</span>());</span><br><span class="line">            texture_pool[path.<span class="built_in">stem</span>().<span class="built_in">u8string</span>()] = texture;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    loader_pool[<span class="string">&quot;.wav&quot;</span>] = loader_pool[<span class="string">&quot;.mp3&quot;</span>] =</span><br><span class="line">        [&amp;](<span class="type">const</span> std::filesystem::path&amp; path)</span><br><span class="line">        &#123;</span><br><span class="line">            Mix_Chunk* audio = <span class="built_in">Mix_LoadWAV</span>(path.<span class="built_in">u8string</span>().<span class="built_in">c_str</span>());</span><br><span class="line">            audio_resid_list.<span class="built_in">push_back</span>(path.<span class="built_in">stem</span>().<span class="built_in">u8string</span>());</span><br><span class="line">            audio_pool[path.<span class="built_in">stem</span>().<span class="built_in">u8string</span>()] = audio;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    loader_pool[<span class="string">&quot;.ttf&quot;</span>] = loader_pool[<span class="string">&quot;.otf&quot;</span>] =</span><br><span class="line">        [&amp;](<span class="type">const</span> std::filesystem::path&amp; path)</span><br><span class="line">        &#123;</span><br><span class="line">            FontWrapper* font = <span class="keyword">new</span> <span class="built_in">FontWrapper</span>(path.<span class="built_in">u8string</span>().<span class="built_in">c_str</span>());</span><br><span class="line">            font_resid_list.<span class="built_in">push_back</span>(path.<span class="built_in">stem</span>().<span class="built_in">u8string</span>());</span><br><span class="line">            font_pool[path.<span class="built_in">stem</span>().<span class="built_in">u8string</span>()] = font;</span><br><span class="line">        &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ResourcesManager::~<span class="built_in">ResourcesManager</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; pair : font_pool)</span><br><span class="line">        <span class="keyword">delete</span> pair.second;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; pair : audio_pool)</span><br><span class="line">        <span class="built_in">Mix_FreeChunk</span>(pair.second);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; pair : texture_pool)</span><br><span class="line">        <span class="built_in">SDL_DestroyTexture</span>(pair.second);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="优点-10"><a href="#优点-10" class="headerlink" title="优点"></a>优点</h4><ol><li><b>节省内存，减少对象创建</b></li></ol><div style="border-top: 3px solid black; font-weight: bold; margin: 20px 0;"></div><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><ul><li>通过代理对象来控制对原始对象的访问，提供一个替代品或占位符，并且可以将客户端提交的请求经过处理后转发给原始对象</li></ul><h4 id="要素-11"><a href="#要素-11" class="headerlink" title="要素"></a>要素</h4><ol><li><b>服务接口</b></li></ol><ul><li>代理类伪装所必须遵循的规则</li></ul><ol start="2"><li><b>实际服务</b></li></ol><ul><li>实际用于提供业务逻辑的类</li></ul><ol start="3"><li><b>代理类</b></li></ol><ul><li>包含实际服务对象成员，代理完成任务的同时可以对请求进行预处理或后处理</li></ul><p><b>示例代码（代理类）</b></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 由于需要使用不同大小的相同字体，TTF_Font类不适合直接使用</span></span><br><span class="line"><span class="comment">// 需要一个字体池来缓存TTF_Font类的实例，避免重复加载</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _FONT_WRAPPER_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _FONT_WRAPPER_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;SDL_ttf.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 替代了TTF_Font类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FontWrapper</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">FontWrapper</span>(<span class="type">const</span> std::string path)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;path = path;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">FontWrapper</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; pair : font_pool)</span><br><span class="line"><span class="built_in">TTF_CloseFont</span>(pair.second);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">TTF_Font* <span class="title">get_font</span><span class="params">(<span class="type">int</span> size)</span><span class="comment">// 提供了字体加载和缓存功能，保证一个大小的字体只被加载一次</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">TTF_Font* font = font_pool[size];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!font)<span class="comment">// 第一次使用时创建实例，并存入缓存（字体池）</span></span><br><span class="line">&#123;</span><br><span class="line">font = <span class="built_in">TTF_OpenFont</span>(path.<span class="built_in">c_str</span>(), size);</span><br><span class="line">font_pool[size] = font;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> font;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">std::string path;</span><br><span class="line">std::unordered_map&lt;<span class="type">int</span>, TTF_Font*&gt; font_pool;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// !_FONT_WRAPPER_H_</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><b>示例代码（业务调用）</b></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SDL_Surface* surface = <span class="built_in">TTF_RenderUTF8_Blended</span>(ResourcesManager::<span class="built_in">instance</span>()</span><br><span class="line">-&gt;<span class="built_in">find_font</span>(<span class="string">&quot;SarasaMonoSC-Regular&quot;</span>)-&gt;<span class="built_in">get_font</span>(font_size), str_text.<span class="built_in">c_str</span>(), color);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="优点-11"><a href="#优点-11" class="headerlink" title="优点"></a>优点</h4><ol><li><b>可以在客户端毫无察觉的情况下控制服务对象</b></li><li><b>实现对实际业务对象生命周期的智能管理</b></li><li><b>可以充当“占位符”，在服务对象还未准备好或不存在时正常工作</b></li></ol><div style="border-top: 3px solid black; font-weight: bold; margin: 20px 0;"></div><h3 id="结构型设计模式对比"><a href="#结构型设计模式对比" class="headerlink" title="结构型设计模式对比"></a>结构型设计模式对比</h3><table><thead><tr><th align="left">模式名称</th><th align="left">核心目标</th></tr></thead><tbody><tr><td align="left"><a href="#%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F">适配器</a></td><td align="left">将一个类的接口转换成客户希望的另一个接口</td></tr><tr><td align="left"><a href="#%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F">桥接</a></td><td align="left">分离抽象与实现，支持多维度扩展</td></tr><tr><td align="left"><a href="#%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F">组合</a></td><td align="left">将对象组合成树形结构以表示“部分-整体”的层次结构</td></tr><tr><td align="left"><a href="#%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F">装饰器</a></td><td align="left">动态地给一个对象添加一些额外的职责</td></tr><tr><td align="left"><a href="#%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F">外观</a></td><td align="left">为子系统提供一个简化的接口</td></tr><tr><td align="left"><a href="#%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F">享元</a></td><td align="left">通过共享对象来支持大量细粒度的对象</td></tr><tr><td align="left"><a href="#%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F">代理</a></td><td align="left">通过代理对象来控制对原始对象的访问</td></tr></tbody></table><div style="border-top: 3px solid black; font-weight: bold; margin: 20px 0;"></div><h2 id="行为型"><a href="#行为型" class="headerlink" title="行为型"></a>行为型</h2><h3 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h3><ul><li>将请求沿处理链传递，直到有对象处理它</li><li><i>允许请求沿着处理者链依次发送，每一个处理者收到请求后，可以对请求进行处理或者发送给下一个处理者</i></li></ul><h4 id="要素-12"><a href="#要素-12" class="headerlink" title="要素"></a>要素</h4><ol><li><b>请求</b></li></ol><ul><li>记录了责任链上的处理者所关心的数据</li></ul><ol start="2"><li><b>抽象处理者</b></li></ol><ul><li>定义处理的接口和设置后继处理者的方法</li></ul><ol start="3"><li><b>具体处理者</b></li></ol><ul><li>实现具体的处理逻辑，并决定是否将请求传递给下一个处理者</li></ul><p><b>示例代码</b></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Request</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> player_level = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> coin_num = <span class="number">10</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象处理者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PreAchievement</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">PreAchievement</span>() = <span class="keyword">default</span>;</span><br><span class="line">~<span class="built_in">PreAchievement</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">handle</span><span class="params">(Request* req)</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">set_next</span><span class="params">(PreAchievement* ach)</span> </span>&#123; next = ach; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">PreAchievement* next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体处理者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PreLevel</span> : <span class="keyword">public</span> PreAchievement</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">handle</span><span class="params">(Request* req)</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> pre_level = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">if</span> (req-&gt;player_level &lt; pre_level)<span class="keyword">return</span>;</span><br><span class="line">next-&gt;<span class="built_in">handle</span>(req);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PreCoin</span> : <span class="keyword">public</span> PreAchievement</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">handle</span><span class="params">(Request* req)</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> pre_coin_num = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span> (req-&gt;coin_num &lt; pre_coin_num)<span class="keyword">return</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;获得成就：大佬&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Request* req = <span class="keyword">new</span> <span class="built_in">Request</span>();</span><br><span class="line">PreAchievement* level = <span class="keyword">new</span> <span class="built_in">PreLevel</span>();</span><br><span class="line">PreAchievement* coin = <span class="keyword">new</span> <span class="built_in">PreCoin</span>();</span><br><span class="line">level-&gt;<span class="built_in">set_next</span>(coin);</span><br><span class="line"></span><br><span class="line">level-&gt;<span class="built_in">handle</span>(req);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="优点-12"><a href="#优点-12" class="headerlink" title="优点"></a>优点</h4><ol><li><b>灵活，请求处理的链式节点可以自由增删，通过组合一个链表数据结构来组合了动态的处理逻辑</b></li><li><b>请求的发送者无需关注具体的处理者，解耦了双端代码</b></li><li><b>符合开闭原则，新增处理者时不影响已有的处理者代码</b></li></ol><div style="border-top: 3px solid black; font-weight: bold; margin: 20px 0;"></div><h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3><ul><li>把客户端的调用行为封装成一个对象</li></ul><h4 id="要素-13"><a href="#要素-13" class="headerlink" title="要素"></a>要素</h4><ol><li><b>接收者</b></li></ol><ul><li>接收具体的任务类</li></ul><ol start="2"><li><b>命令接口</b></li></ol><ul><li>规定所有的具体命令类必须实现的接口</li></ul><ol start="3"><li><b>具体命令</b></li></ol><ul><li>实现命令接口，调用接收者的具体方法</li></ul><ol start="4"><li><b>发送者</b></li></ol><ul><li>用来触发命令调用，也被叫做触发者</li></ul><p><b>示例代码</b></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Direction</span></span><br><span class="line">&#123;</span><br><span class="line">Up,</span><br><span class="line">Down,</span><br><span class="line">Left,</span><br><span class="line">Right</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 命令接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Command</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">execute</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Player</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Player</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Player</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (Command* cmd : cmd_list)</span><br><span class="line"><span class="keyword">delete</span> cmd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">on_move</span><span class="params">(<span class="type">const</span> Direction&amp; dir)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">switch</span> (dir)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> Up:</span><br><span class="line">position.first--;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> Down:</span><br><span class="line">position.first++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> Left:</span><br><span class="line">position.second--;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> Right:</span><br><span class="line">position.second++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cmd_list.<span class="built_in">emplace_back</span>(<span class="keyword">new</span> <span class="built_in">MoveCommand</span>(<span class="keyword">this</span>, dir));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; position;</span><br><span class="line">std::vector&lt;Command*&gt; cmd_list;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体命令</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MoveCommand</span> : <span class="keyword">public</span> Command</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">MoveCommand</span>(Player* player, <span class="type">const</span> Direction&amp; dir)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;player = player;</span><br><span class="line"><span class="keyword">this</span>-&gt;dir = dir;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">execute</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">player-&gt;<span class="built_in">on_move</span>(dir);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Player* player;</span><br><span class="line">Direction dir = Direction::Up;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Replayer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Replayer</span>(Player* player)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;player = player;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">Replayer</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">on_replay</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::vector&lt;Command*&gt; list = player-&gt;<span class="built_in">get_cmd_list</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据list回放操作</span></span><br><span class="line"><span class="keyword">for</span> (Command* cmd : list)</span><br><span class="line">&#123;</span><br><span class="line">cmd-&gt;<span class="built_in">execute</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Player* player;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前代码Player和MoveCommand相互包含，可以新建一个“存储类”来存储命令列表</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="优点-13"><a href="#优点-13" class="headerlink" title="优点"></a>优点</h4><ol><li><b>将请求发送者和请求接收者解耦</b></li><li><b>可以将请求（命令）参数化</b></li><li><b>可以支持撤销和重做操作</b></li><li><b>扩展性强</b></li></ol><ul><li>命令接口通常计较简单，当有新的命令对象时，无需修改接收者，发送者以及现有命令，只需添加新的命令类即可</li></ul><div style="border-top: 3px solid black; font-weight: bold; margin: 20px 0;"></div><h3 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h3><ul><li>提供遍历集合的统一接口，允许在不暴露底层数据结构的前提下，遍历集合中所有的元素</li></ul><h4 id="要素-14"><a href="#要素-14" class="headerlink" title="要素"></a>要素</h4><ol><li><b>迭代器</b></li></ol><ul><li>接口声明了获取下一元素等必要的操作</li></ul><ol start="2"><li><b>具体迭代器</b></li></ol><ul><li>实现遍历集合的一种算法并记录自己的进度</li></ul><ol start="3"><li><b>集合</b></li></ol><ul><li>接口声明获取迭代器的方法</li></ul><ol start="4"><li><b>具体集合</b></li></ol><ul><li>实现返回具体迭代器的接口</li></ul><p><b>示例代码</b></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Player</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Player</span>(std::string id, <span class="type">int</span> level)</span><br><span class="line">: <span class="built_in">id</span>(id), <span class="built_in">level</span>(level) &#123;&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Player</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">const</span> std::string&amp; <span class="title">get_id</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_level</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> level;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">std::string id;</span><br><span class="line"><span class="type">int</span> level;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 迭代器基类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Iterator</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Iterator</span>(<span class="type">const</span> std::vector&lt;Player*&gt;&amp; list)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 复制副本，迭代器排序只修改此副本</span></span><br><span class="line">player_list = std::<span class="built_in">vector</span>&lt;Player*&gt;(list);</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">Iterator</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (Player* p : player_list)</span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">bool</span> <span class="title">has_next</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> Player* <span class="title">next</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">std::vector&lt;Player*&gt; player_list;</span><br><span class="line"><span class="type">size_t</span> index;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体迭代器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CheckIdIt</span> : <span class="keyword">public</span> Iterator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">CheckIdIt</span>(<span class="type">const</span> std::vector&lt;Player*&gt;&amp; list) : <span class="built_in">Iterator</span>(list)</span><br><span class="line">&#123;</span><br><span class="line">std::<span class="built_in">sort</span>(player_list.<span class="built_in">begin</span>(), player_list.<span class="built_in">end</span>(), [](<span class="type">const</span> Player* t_1, <span class="type">const</span> Player* t_2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> t_1-&gt;<span class="built_in">get_id</span>() &lt; t_2-&gt;<span class="built_in">get_id</span>();</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">has_next</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> player_list.<span class="built_in">size</span>() &gt; index;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Player* <span class="title">next</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">has_next</span>())<span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line"><span class="keyword">return</span> player_list[index++];</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CheckLevelIt</span> : <span class="keyword">public</span> Iterator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">CheckLevelIt</span>(<span class="type">const</span> std::vector&lt;Player*&gt;&amp; list) : <span class="built_in">Iterator</span>(list)</span><br><span class="line">&#123;</span><br><span class="line">std::<span class="built_in">sort</span>(player_list.<span class="built_in">begin</span>(), player_list.<span class="built_in">end</span>(), [](<span class="type">const</span> Player* t_1, <span class="type">const</span> Player* t_2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> t_1-&gt;<span class="built_in">get_level</span>() &gt; t_2-&gt;<span class="built_in">get_level</span>();</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">has_next</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> player_list.<span class="built_in">size</span>() &gt; index;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Player* <span class="title">next</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">has_next</span>())<span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line"><span class="keyword">return</span> player_list[index++];</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 集合</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Collection</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> Iterator* <span class="title">create_iterator</span><span class="params">(std::string itor_type)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体集合</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PlayerList</span> : <span class="keyword">public</span> Collection</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">PlayerList</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 可以外部手动态添加</span></span><br><span class="line">player_list.<span class="built_in">emplace_back</span>(<span class="keyword">new</span> <span class="built_in">Player</span>(<span class="string">&quot;ZhangSan&quot;</span>, <span class="number">10</span>));</span><br><span class="line">player_list.<span class="built_in">emplace_back</span>(<span class="keyword">new</span> <span class="built_in">Player</span>(<span class="string">&quot;LiSi&quot;</span>, <span class="number">8</span>));</span><br><span class="line">player_list.<span class="built_in">emplace_back</span>(<span class="keyword">new</span> <span class="built_in">Player</span>(<span class="string">&quot;WangWu&quot;</span>, <span class="number">16</span>));</span><br><span class="line">player_list.<span class="built_in">emplace_back</span>(<span class="keyword">new</span> <span class="built_in">Player</span>(<span class="string">&quot;ZhaoLiu&quot;</span>, <span class="number">12</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">PlayerList</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (Player* p : player_list)</span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Iterator* <span class="title">create_iterator</span><span class="params">(std::string itor_type)</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (itor_type == <span class="string">&quot;level&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">CheckLevelIt</span>(player_list);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (itor_type == <span class="string">&quot;id&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">CheckIdIt</span>(player_list);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">std::vector&lt;Player*&gt; player_list;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Collection* player_list = <span class="keyword">new</span> <span class="built_in">PlayerList</span>();</span><br><span class="line">Iterator* id_itor = player_list-&gt;<span class="built_in">create_iterator</span>(<span class="string">&quot;id&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (id_itor-&gt;<span class="built_in">has_next</span>())</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; id_itor-&gt;<span class="built_in">next</span>()-&gt;<span class="built_in">get_id</span>() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">Iterator* level_itor = player_list-&gt;<span class="built_in">create_iterator</span>(<span class="string">&quot;level&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (level_itor-&gt;<span class="built_in">has_next</span>())</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; level_itor-&gt;<span class="built_in">next</span>()-&gt;<span class="built_in">get_level</span>() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="优点-14"><a href="#优点-14" class="headerlink" title="优点"></a>优点</h4><ol><li><b>隐藏集合内部复杂的细节，更加便利和安全</b></li><li><b>减少程序中重复的遍历代码</b></li><li><b>统一的接口，可以应对不同的和未来无法预知的数据结构</b></li><li><b>允许对同一集合实现不同的遍历逻辑</b></li></ol><div style="border-top: 3px solid black; font-weight: bold; margin: 20px 0;"></div><h3 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h3><ul><li>限制对象之间的彼此交互，强迫他们通过中介者对象进行合作通信</li><li><i>解决需要互相通信的两个对象之间必须依赖彼此</i></li></ul><h4 id="要素-15"><a href="#要素-15" class="headerlink" title="要素"></a>要素</h4><ol><li><b>抽象组件</b></li><li><b>具体组件</b></li><li><b>抽象中介者</b></li></ol><ul><li>通常仅包含一个通知方法本身并不一个规定太多复杂行为</li></ul><ol start="4"><li><b>具体中介者</b></li></ol><ul><li>持有各个组件的引用，有时还要管理组件的生命周期</li></ul><p><b>示例代码</b></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Colleague</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象中介者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mediator</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// 唯一通信接口</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">send</span><span class="params">(<span class="type">const</span> std::string&amp; message, Colleague* sender)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Colleague</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Colleague</span>(Mediator* mediator)</span><br><span class="line">: <span class="built_in">mediator</span>(mediator) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收消息</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">receive</span><span class="params">(<span class="type">const</span> std::string&amp; message)</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">Mediator* mediator;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体中介者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChatRoom</span> : <span class="keyword">public</span> Mediator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_colleague</span><span class="params">(Colleague* colleague)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">colleague_list.<span class="built_in">emplace_back</span>(colleague);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">send</span><span class="params">(<span class="type">const</span> std::string&amp; message, Colleague* sender)</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (Colleague* colleague : colleague_list)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (colleague != sender)</span><br><span class="line">&#123;</span><br><span class="line">colleague-&gt;<span class="built_in">receive</span>(message);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">std::vector&lt;Colleague*&gt; colleague_list;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> : <span class="keyword">public</span> Colleague</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">User</span>(Mediator* mediator, <span class="type">const</span> std::string&amp; name)</span><br><span class="line">: <span class="built_in">Colleague</span>(mediator), <span class="built_in">name</span>(name) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">send</span><span class="params">(<span class="type">const</span> std::string&amp; message)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">mediator-&gt;<span class="built_in">send</span>(message, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">receive</span><span class="params">(<span class="type">const</span> std::string&amp; message)</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; name &lt;&lt; <span class="string">&quot;接收到:&quot;</span> &lt;&lt; message &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">std::string name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ChatRoom chat_room;</span><br><span class="line"></span><br><span class="line">User* zhangsan = <span class="keyword">new</span> <span class="built_in">User</span>(&amp;chat_room, <span class="string">&quot;ZhangSan&quot;</span>);</span><br><span class="line">User* lisi = <span class="keyword">new</span> <span class="built_in">User</span>(&amp;chat_room, <span class="string">&quot;LiSi&quot;</span>);</span><br><span class="line">User* wangwu = <span class="keyword">new</span> <span class="built_in">User</span>(&amp;chat_room, <span class="string">&quot;WangWu&quot;</span>);</span><br><span class="line"></span><br><span class="line">chat_room.<span class="built_in">add_colleague</span>(zhangsan);</span><br><span class="line">chat_room.<span class="built_in">add_colleague</span>(lisi);</span><br><span class="line">chat_room.<span class="built_in">add_colleague</span>(wangwu);</span><br><span class="line"></span><br><span class="line">zhangsan-&gt;<span class="built_in">send</span>(<span class="string">&quot;im zhangsan&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="优点-15"><a href="#优点-15" class="headerlink" title="优点"></a>优点</h4><ol><li><b>减少类间依赖</b></li><li><b>可以管理各个组件的生命周期</b></li></ol><h4 id="思考-2"><a href="#思考-2" class="headerlink" title="思考"></a>思考</h4><ol><li><b>代理模式和中介者模式</b></li></ol><ul><li>代理模式是使用代理对象控制对目标对象的直接访问，实现缓存，延迟加载以及权限控制等功能</li><li>中介者模式着重解决的痛点是不同组件（对象）之间的通信问题，程序层面通信总是要落实到某个接口函数的调用，中介者模式抽象出第三者代替完成这项任务</li></ul><div style="border-top: 3px solid black; font-weight: bold; margin: 20px 0;"></div><h3 id="备忘录模式"><a href="#备忘录模式" class="headerlink" title="备忘录模式"></a>备忘录模式</h3><ul><li>允许在不暴露对象实现细节的情况下，保存和恢复对象的状态</li></ul><h4 id="要素-16"><a href="#要素-16" class="headerlink" title="要素"></a>要素</h4><ol><li><b>备忘录</b></li><li><b>发起人</b></li><li><b>管理者</b></li></ol><ul><li>管理备忘录列表，提供保存和恢复的接口</li></ul><p><b>示例代码</b></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 备忘录</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Memento</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Memento</span>(<span class="type">const</span> std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&amp; position, <span class="type">float</span> speed, <span class="type">int</span> health)</span><br><span class="line">: <span class="built_in">position</span>(position), <span class="built_in">speed</span>(speed), <span class="built_in">health</span>(health) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">const</span> std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; <span class="title">get_position</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> position;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">get_speed</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> speed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_health</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> health;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; position;</span><br><span class="line"><span class="type">float</span> speed;</span><br><span class="line"><span class="type">int</span> health;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发起人</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Player</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">set_position</span><span class="params">(<span class="type">const</span> std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&amp; pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">position = pos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">set_speed</span><span class="params">(<span class="type">float</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">speed = val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">set_health</span><span class="params">(<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">health = val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Memento <span class="title">save_state</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Memento</span>(position, speed, health);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">restone_memento</span><span class="params">(<span class="type">const</span> Memento&amp; memento)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">position = memento.<span class="built_in">get_position</span>();</span><br><span class="line">speed = memento.<span class="built_in">get_speed</span>();</span><br><span class="line">health = memento.<span class="built_in">get_health</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; position = &#123; <span class="number">0</span>,<span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">float</span> speed = <span class="number">2.0f</span>;</span><br><span class="line"><span class="type">int</span> health = <span class="number">10</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 管理者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Caretaker</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">save_memento</span><span class="params">(<span class="type">const</span> Memento&amp; memento)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">history.<span class="built_in">emplace_back</span>(memento);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Memento <span class="title">get_memento</span><span class="params">(<span class="type">int</span> index)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> history[index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">std::vector&lt;Memento&gt; history;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Player player;</span><br><span class="line">player.<span class="built_in">set_position</span>(&#123; <span class="number">10</span>,<span class="number">10</span> &#125;);</span><br><span class="line">player.<span class="built_in">set_speed</span>(<span class="number">0.5f</span>);</span><br><span class="line">player.<span class="built_in">set_health</span>(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">Caretaker caretaker;</span><br><span class="line"></span><br><span class="line">caretaker.<span class="built_in">save_memento</span>(player.<span class="built_in">save_state</span>());</span><br><span class="line">player.<span class="built_in">set_position</span>(&#123; <span class="number">0</span>,<span class="number">0</span> &#125;);</span><br><span class="line">player.<span class="built_in">set_speed</span>(<span class="number">2.0f</span>);</span><br><span class="line">player.<span class="built_in">set_health</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">player.<span class="built_in">restone_memento</span>(caretaker.<span class="built_in">get_memento</span>(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="优点-16"><a href="#优点-16" class="headerlink" title="优点"></a>优点</h4><ol><li><b>可以在不暴露对象实现细节的情况下保存和恢复对象的状态</b></li><li><b>符合单一职责原则</b></li><li><b>符合开闭原则</b></li></ol><h4 id="思考-3"><a href="#思考-3" class="headerlink" title="思考"></a>思考</h4><ol><li><b>备忘录模式和<a href="#%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F">原型模式</a></b></li></ol><ul><li>原型模式可以看作是备忘录模式的一种退化，原型模式克隆了对象的所有列表，备忘录模式可以选择性的克隆对象的状态</li></ul><ol start="2"><li><b>备忘录模式和<a href="#%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F">命令模式</a></b></li></ol><ul><li>备忘录模式是通过必要的字段，对对象的状态记录</li><li>命令模式是对行为的记录，实现撤销和重做操作时相当于是对行为的逐一调用，对对象进行增量的修改与恢复</li></ul><div style="border-top: 3px solid black; font-weight: bold; margin: 20px 0;"></div><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><ul><li>定义了一种一对多的依赖关系，当一个对象状态发生变化时，所有依赖于它的对象都会得到通知并自动更新</li></ul><h4 id="要素-17"><a href="#要素-17" class="headerlink" title="要素"></a>要素</h4><ol><li><b>主题</b></li><li><b>观察者</b></li><li><b>具体主题</b></li></ol><ul><li>允许添加移除观察者，并能在状态变化时通知观察者</li></ul><ol start="4"><li><b>具体观察者</b></li></ol><p><b>示例代码</b></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 观察者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Observer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">on_update</span><span class="params">(<span class="type">int</span> state)</span> </span>= <span class="number">0</span>;<span class="comment">//定义更新逻辑，state是需要观察的主题某个状态</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主题</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Subject</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">attach</span><span class="params">(Observer* observer)</span> </span>= <span class="number">0</span>;<span class="comment">// 添加观察者</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">detach</span><span class="params">(Observer* observer)</span> </span>= <span class="number">0</span>;<span class="comment">// 移除观察者  这两部分一般是固定的，可以直接在这个类中实现</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">notify</span><span class="params">()</span> </span>= <span class="number">0</span>;<span class="comment">// 通知接口</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体主题</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteSubject</span> : <span class="keyword">public</span> Subject</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">attach</span><span class="params">(Observer* observer)</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">observer_list.<span class="built_in">emplace_back</span>(observer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">detach</span><span class="params">(Observer* observer)</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">observer_list.<span class="built_in">erase</span>(<span class="built_in">remove</span>(observer_list.<span class="built_in">begin</span>(), observer_list.<span class="built_in">end</span>(), observer), observer_list.<span class="built_in">end</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">notify</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; observer : observer_list)</span><br><span class="line">&#123;</span><br><span class="line">observer-&gt;<span class="built_in">on_update</span>(state);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">set_state</span><span class="params">(<span class="type">int</span> val)</span><span class="comment">// 更新调用notify</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">state = val;</span><br><span class="line"><span class="built_in">notify</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">std::vector&lt;Observer*&gt; observer_list;</span><br><span class="line"><span class="type">int</span> state = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteObserver</span> : <span class="keyword">public</span> Observer</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">ConcreteObserver</span>(<span class="type">const</span> std::string&amp; name)</span><br><span class="line">: <span class="built_in">name</span>(name) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">on_update</span><span class="params">(<span class="type">int</span> state)</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; name &lt;&lt; <span class="string">&quot;:监听到新状态:&quot;</span> &lt;&lt; state &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">std::string name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ConcreteSubject sub;</span><br><span class="line"></span><br><span class="line"><span class="function">ConcreteObserver <span class="title">ob_1</span><span class="params">(<span class="string">&quot;ob_1&quot;</span>)</span></span>;</span><br><span class="line"><span class="function">ConcreteObserver <span class="title">ob_2</span><span class="params">(<span class="string">&quot;ob_2&quot;</span>)</span></span>;</span><br><span class="line"><span class="function">ConcreteObserver <span class="title">ob_3</span><span class="params">(<span class="string">&quot;ob_3&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">sub.<span class="built_in">attach</span>(&amp;ob_1);</span><br><span class="line">sub.<span class="built_in">attach</span>(&amp;ob_2);</span><br><span class="line">sub.<span class="built_in">attach</span>(&amp;ob_3);</span><br><span class="line"></span><br><span class="line">sub.<span class="built_in">set_state</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="优点-17"><a href="#优点-17" class="headerlink" title="优点"></a>优点</h4><ul><li><b>松耦合</b></li><li><b>符合开闭原则</b></li><li><b>符合单一职责原则</b></li></ul><div style="border-top: 3px solid black; font-weight: bold; margin: 20px 0;"></div><h3 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h3><ul><li><b>允许对象在其内部状态改变时改变它的行为，就像是改变了自身的类一样</b></li></ul><h4 id="要素-18"><a href="#要素-18" class="headerlink" title="要素"></a>要素</h4><ol><li><b>状态接口</b></li><li><b>具体状态</b></li><li><b>上下文</b></li></ol><ul><li>持有当前状态对象指针（若有状态机则存入状态机中），若没有状态机则提供方法来切换状态</li></ul><ol start="4"><li><b>状态机（可选）</b></li></ol><ul><li>可以将状态机的状态和转换逻辑封装在一个类中，简化上下文的实现</li></ul><p><b>示例代码</b></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 状态接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">State</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">handle</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体状态</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Run</span> : <span class="keyword">public</span> State</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">handle</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;正在奔跑&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体状态</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Attack</span> : <span class="keyword">public</span> State</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">handle</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;正在攻击&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上下文</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Player</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Player</span>(State* state)</span><br><span class="line">: <span class="built_in">current_state</span>(state) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">current_state-&gt;<span class="built_in">handle</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">set_state</span><span class="params">(State* state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">current_state = state;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">State* current_state;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="优点-18"><a href="#优点-18" class="headerlink" title="优点"></a>优点</h4><ol><li><b>简化代码</b></li></ol><ul><li>抛弃 if…else 和 switch 语句，避免了复杂的条件判断</li></ul><ol start="2"><li><b>易于扩展</b></li></ol><ul><li>新增状态时只需添加新的状态类，无需修改现有的状态类和上下文类</li></ul><ol start="3"><li><b>符合开闭原则</b></li><li><b>符合单一职责原则</b></li></ol><div style="border-top: 3px solid black; font-weight: bold; margin: 20px 0;"></div>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
