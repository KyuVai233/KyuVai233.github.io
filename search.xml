<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>学习设计模式</title>
      <link href="/2025/03/25/archives/%E5%AD%A6%E4%B9%A0%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2025/03/25/archives/%E5%AD%A6%E4%B9%A0%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#%E5%AD%A6%E4%B9%A0%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F">学习设计模式</a><ul><li><a href="#%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%88%86%E7%B1%BB">设计模式分类</a></li><li><a href="#%E5%88%9B%E9%80%A0%E5%9E%8B">创造型</a><ul><li><a href="#%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F">工厂方法模式</a><ul><li><a href="#%E8%A6%81%E7%B4%A0">要素</a></li><li><a href="#%E4%BC%98%E7%82%B9">优点</a></li></ul></li><li><a href="#%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95">抽象工厂方法</a><ul><li><a href="#%E8%A6%81%E7%B4%A0-1">要素</a></li><li><a href="#%E4%BC%98%E7%82%B9-1">优点</a></li></ul></li><li><a href="#%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F">建造者模式</a><ul><li><a href="#%E8%A6%81%E7%B4%A0-2">要素</a></li><li><a href="#%E4%BC%98%E7%82%B9-2">优点</a></li></ul></li><li><a href="#%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F">原型模式</a><ul><li><a href="#%E8%A6%81%E7%B4%A0-3">要素</a></li><li><a href="#%E4%BC%98%E7%82%B9-3">优点</a></li><li><a href="#%E6%80%9D%E8%80%83">思考</a></li></ul></li></ul></li></ul></li></ul><h1 id="学习设计模式"><a href="#学习设计模式" class="headerlink" title="学习设计模式"></a>学习设计模式</h1><h2 id="设计模式分类"><a href="#设计模式分类" class="headerlink" title="设计模式分类"></a>设计模式分类</h2><ol><li><b>创造型</b></li></ol><ul><li>主要关注创造对象的过程，隐藏创造逻辑。</li></ul><ol start="2"><li><b>结构型</b></li></ol><ul><li>主要管理类和对象的组合，形成较大的结构的同时保持结构的灵活性和高效性。</li></ul><ol start="3"><li><b>行为型</b></li></ol><ul><li>主要优化对象间的交互和职责分配。</li></ul><h2 id="创造型"><a href="#创造型" class="headerlink" title="创造型"></a>创造型</h2><h3 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h3><ul><li>定义创建对象的接口，但由子类决定具体实例化的类。将对象的创建延迟到子类</li></ul><h4 id="要素"><a href="#要素" class="headerlink" title="要素"></a>要素</h4><ol><li><b>抽象产品</b></li></ol><ul><li>产品基类</li></ul><ol start="2"><li><b>具体产品</b></li></ol><ul><li>继承抽象产品，即要生产的对象</li></ul><ol start="3"><li><b>抽象工厂&#x2F;创建者</b></li></ol><ul><li>工厂基类，提供统一的抽象创造方法（接口），由具体工厂实现（重写）<i>(可省略？)</i></li></ul><ol start="4"><li><b>具体工厂</b></li></ol><ul><li>继承抽象工厂，实现（重写）抽象工厂的方法（接口），根据条件去创造具体产品</li></ul><p><b>示例代码</b></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; Vector2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum class</span> <span class="title class_">Attribute</span> &#123; Ice, Grass, Fire &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GameObject</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">GameObject</span>(<span class="type">const</span> Vector2&amp; _position) : <span class="built_in">position</span>(_position) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">on_update</span><span class="params">(<span class="type">float</span> delta)</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">on_render</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">Vector2 position;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sword</span> : <span class="keyword">public</span> GameObject</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Sword</span>(<span class="type">const</span> Vector2&amp; _position) : <span class="built_in">GameObject</span>(_position) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">on_update</span><span class="params">(<span class="type">float</span> delta)</span> <span class="keyword">override</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">on_render</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;生成剑纹理&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Slime</span> : <span class="keyword">public</span> GameObject</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Slime</span>(<span class="type">const</span> Vector2&amp; _position) : <span class="built_in">GameObject</span>(_position) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">on_update</span><span class="params">(<span class="type">float</span> delta)</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;slime 动画更新&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">on_render</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;生成 slime 动画&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IceSword</span> : <span class="keyword">public</span> Sword</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">IceSword</span>(<span class="type">const</span> Vector2&amp; _position) : <span class="built_in">Sword</span>(_position) &#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GrassSword</span> : <span class="keyword">public</span> Sword</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">GrassSword</span>(<span class="type">const</span> Vector2&amp; _position) : <span class="built_in">Sword</span>(_position) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FireSword</span> : <span class="keyword">public</span> Sword</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">FireSword</span>(<span class="type">const</span> Vector2&amp; _position) : <span class="built_in">Sword</span>(_position) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IceSlime</span> : <span class="keyword">public</span> Slime</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">IceSlime</span>(<span class="type">const</span> Vector2&amp; _position) : <span class="built_in">Slime</span>(_position) &#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GrassSlime</span> : <span class="keyword">public</span> Slime</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">GrassSlime</span>(<span class="type">const</span> Vector2&amp; _position) : <span class="built_in">Slime</span>(_position) &#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FireSlime</span> : <span class="keyword">public</span> Slime</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">FireSlime</span>(<span class="type">const</span> Vector2&amp; _position) : <span class="built_in">Slime</span>(_position) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SwordFactory</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">Sword* <span class="title">create</span><span class="params">(Attribute attribute, <span class="type">const</span> Vector2&amp; position)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">switch</span> (attribute)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> Attribute::Ice:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">IceSword</span>(position);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> Attribute::Grass:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">GrassSword</span>(position);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> Attribute::Fire:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">FireSword</span>(position);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SlimeFactory</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">Slime* <span class="title">create</span><span class="params">(Attribute attribute, <span class="type">const</span> Vector2&amp; position)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">switch</span> (attribute)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> Attribute::Ice:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">IceSlime</span>(position);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> Attribute::Grass:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">GrassSlime</span>(position);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> Attribute::Fire:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">FireSlime</span>(position);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FactoryMethodPattern</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">FactoryMethodPattern</span>()</span><br><span class="line">&#123;</span><br><span class="line">SwordFactory sword_factory;</span><br><span class="line">SlimeFactory slime_factory;</span><br><span class="line"></span><br><span class="line">game_obj_list.<span class="built_in">push_back</span>(sword_factory.<span class="built_in">create</span>(Attribute::Ice, &#123; <span class="number">200</span>, <span class="number">100</span> &#125;));</span><br><span class="line">game_obj_list.<span class="built_in">push_back</span>(sword_factory.<span class="built_in">create</span>(Attribute::Grass, &#123; <span class="number">200</span>, <span class="number">300</span> &#125;));</span><br><span class="line">game_obj_list.<span class="built_in">push_back</span>(sword_factory.<span class="built_in">create</span>(Attribute::Fire, &#123; <span class="number">200</span>, <span class="number">500</span> &#125;));</span><br><span class="line"></span><br><span class="line">game_obj_list.<span class="built_in">push_back</span>(slime_factory.<span class="built_in">create</span>(Attribute::Ice, &#123; <span class="number">425</span>, <span class="number">140</span> &#125;));</span><br><span class="line">game_obj_list.<span class="built_in">push_back</span>(slime_factory.<span class="built_in">create</span>(Attribute::Grass, &#123; <span class="number">425</span>, <span class="number">340</span> &#125;));</span><br><span class="line">game_obj_list.<span class="built_in">push_back</span>(slime_factory.<span class="built_in">create</span>(Attribute::Fire, &#123; <span class="number">425</span>, <span class="number">540</span> &#125;));</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">FactoryMethodPattern</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (GameObject* game_obj : game_obj_list)</span><br><span class="line"><span class="keyword">delete</span> game_obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">on_update</span><span class="params">(<span class="type">float</span> delta)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (GameObject* game_obj : game_obj_list)</span><br><span class="line">game_obj-&gt;<span class="built_in">on_update</span>(delta);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">on_render</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (GameObject* game_obj : game_obj_list)</span><br><span class="line">game_obj-&gt;<span class="built_in">on_render</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">std::vector&lt;GameObject*&gt; game_obj_list;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ol><li><b>解耦客户端与具体类依赖</b></li></ol><ul><li>将产品的代码与使用该产品的客户端内容进行分离</li><li><i>譬如在游戏开发中，玩家类只需要依赖具体工厂类，无需关注产品类内部实现与构造需求</i></li></ul><ol start="2"><li><b>提高系统的可扩展性</b></li></ol><ul><li>引入新产品无需修改已有代码</li><li><i>引入新产品时，只需要构建新的具体工厂类</i></li></ul><ol start="3"><li><b>封装复杂的对象创建逻辑</b></li></ol><ul><li>工厂内部屏蔽对象创建和初始化的复杂操作</li></ul><ol start="4"><li><p><b>遵循开闭原则和单一职责原则</b></p></li><li><p><b>提高可维护性</b></p></li></ol><ul><li>将对象创建的代码逻辑集中在一起方便后续修改维护</li></ul><div style="border-top: 3px solid black; font-weight: bold; margin: 20px 0;"></div><h3 id="抽象工厂方法"><a href="#抽象工厂方法" class="headerlink" title="抽象工厂方法"></a>抽象工厂方法</h3><h4 id="要素-1"><a href="#要素-1" class="headerlink" title="要素"></a>要素</h4><ol><li><b>抽象产品</b></li></ol><ul><li>提供一个接口，用于创建相关或依赖对象的家族，而无需指定具体类。</li></ul><ol><li><p><b>具体产品</b></p></li><li><p><b>抽象工厂</b></p></li><li><p><b>具体工厂</b></p></li></ol><p><b>示例代码</b></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//武器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Weapon</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">used</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//防具</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Armor</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">equited</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//剑</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sword</span> : <span class="keyword">public</span> Weapon</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">used</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;used sword&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//盾</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Shield</span> : <span class="keyword">public</span> Armor</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">equited</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;equited shield&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//法杖</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Staff</span> : <span class="keyword">public</span> Weapon</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">used</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;used staff&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//魔法书（法师防具）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpellBook</span> : <span class="keyword">public</span> Armor</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">equited</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;equited spellbook&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EquitmentFactory</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> Weapon* <span class="title">create_weapon</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> Armor* <span class="title">create_armor</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//战士工厂</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WarriorFactory</span> : <span class="keyword">public</span> EquitmentFactory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">Weapon* <span class="title">create_weapon</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Sword</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Armor* <span class="title">create_armor</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Shield</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//法师工厂</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MageFactory</span> : <span class="keyword">public</span> EquitmentFactory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">Weapon* <span class="title">create_weapon</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Staff</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Armor* <span class="title">create_armor</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">SpellBook</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Character</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Character</span>(EquitmentFactory* factory) :</span><br><span class="line"><span class="built_in">factory</span>(factory) &#123;&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Character</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">equit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Weapon* weapon = factory-&gt;<span class="built_in">create_weapon</span>();</span><br><span class="line">Armor* armor = factory-&gt;<span class="built_in">create_armor</span>();</span><br><span class="line"></span><br><span class="line">weapon-&gt;<span class="built_in">used</span>();</span><br><span class="line">armor-&gt;<span class="built_in">equited</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">EquitmentFactory* factory;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">EquitmentFactory* warrior_factory = <span class="keyword">new</span> <span class="built_in">WarriorFactory</span>();</span><br><span class="line"><span class="function">Character <span class="title">warrior</span><span class="params">(warrior_factory)</span></span>;</span><br><span class="line">warrior.<span class="built_in">equit</span>();</span><br><span class="line"></span><br><span class="line">EquitmentFactory* mage_factory = <span class="keyword">new</span> <span class="built_in">MageFactory</span>();</span><br><span class="line"><span class="function">Character <span class="title">mage</span><span class="params">(mage_factory)</span></span>;</span><br><span class="line">mage.<span class="built_in">equit</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><ol><li>在<a href="#%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F">工厂模式方法</a>基础上，有更多维度的定制化</li></ol><div style="border-top: 3px solid black; font-weight: bold; margin: 20px 0;"></div><h3 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h3><ul><li>可以叫做“生成器模式”，通常在复杂对象的构造中，把对象构造的逻辑从其本身的类中抽离出来，让专门的生成器来负责</li></ul><h4 id="要素-2"><a href="#要素-2" class="headerlink" title="要素"></a>要素</h4><ol><li><p><b>目标产品</b></p></li><li><p><b>抽象生成器</b></p></li></ol><ul><li>定义建造者的抽象接口</li></ul><ol start="3"><li><p><b>具体生成器</b></p></li><li><p>导演&#x2F;主管</p></li></ol><ul><li>代理调用生成器的各个建造步骤，如果对生成的步骤没有严格要求就可以省略</li></ul><p><b>示例代码</b></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//游戏关卡类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GameLevel</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">std::string level_name;</span><br><span class="line">std::vector&lt;std::string&gt; enemy_list;</span><br><span class="line">std::vector&lt;std::string&gt; item_list;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;run&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关卡生成器基类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LevelBuilder</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">set_level_name</span><span class="params">(<span class="type">const</span> std::string&amp; name)</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">add_enemy</span><span class="params">(<span class="type">const</span> std::string&amp; enemy)</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">add_item</span><span class="params">(<span class="type">const</span> std::string&amp; item)</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">set_mode</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> GameLevel* <span class="title">build</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//简单关卡生成器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EasyLevelBuilder</span> : <span class="keyword">public</span> LevelBuilder</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">EasyLevelBuilder</span>()</span><br><span class="line">&#123;</span><br><span class="line">game_level = <span class="keyword">new</span> <span class="built_in">GameLevel</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">set_level_name</span><span class="params">(<span class="type">const</span> std::string&amp; name)</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">game_level-&gt;level_name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_enemy</span><span class="params">(<span class="type">const</span> std::string&amp; enemy)</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">game_level-&gt;enemy_list.<span class="built_in">push_back</span>(enemy);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_item</span><span class="params">(<span class="type">const</span> std::string&amp; item)</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">game_level-&gt;item_list.<span class="built_in">push_back</span>(item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">set_mode</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">mode = <span class="string">&quot;easy&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">GameLevel* <span class="title">build</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> game_level;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">GameLevel* game_level;</span><br><span class="line">std::string mode;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//困难关卡生成器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HardLevelBuilder</span> : <span class="keyword">public</span> LevelBuilder</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">HardLevelBuilder</span>()</span><br><span class="line">&#123;</span><br><span class="line">game_level = <span class="keyword">new</span> <span class="built_in">GameLevel</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">set_level_name</span><span class="params">(<span class="type">const</span> std::string&amp; name)</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">game_level-&gt;level_name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_enemy</span><span class="params">(<span class="type">const</span> std::string&amp; enemy)</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">game_level-&gt;enemy_list.<span class="built_in">push_back</span>(enemy);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_item</span><span class="params">(<span class="type">const</span> std::string&amp; item)</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">game_level-&gt;item_list.<span class="built_in">push_back</span>(item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">set_mode</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">mode = <span class="string">&quot;hard&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">GameLevel* <span class="title">build</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> game_level;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">GameLevel* game_level;</span><br><span class="line">std::string mode;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关卡导演类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GameLevelDirector</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">GameLevelDirector</span>(LevelBuilder* level_build)</span><br><span class="line">:<span class="built_in">level_build</span>(level_build)&#123;&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">GameLevelDirector</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">GameLevel* <span class="title">create_easy_level_1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">level_build-&gt;<span class="built_in">set_level_name</span>(<span class="string">&quot;Swamp&quot;</span>);</span><br><span class="line">level_build-&gt;<span class="built_in">set_mode</span>();</span><br><span class="line">level_build-&gt;<span class="built_in">add_enemy</span>(<span class="string">&quot;Slime&quot;</span>);</span><br><span class="line">level_build-&gt;<span class="built_in">add_enemy</span>(<span class="string">&quot;Slime&quot;</span>);</span><br><span class="line">level_build-&gt;<span class="built_in">add_enemy</span>(<span class="string">&quot;Wolf&quot;</span>);</span><br><span class="line">level_build-&gt;<span class="built_in">add_item</span>(<span class="string">&quot;Apple&quot;</span>);</span><br><span class="line">level_build-&gt;<span class="built_in">add_item</span>(<span class="string">&quot;Sword&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> level_build-&gt;<span class="built_in">build</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">GameLevel* <span class="title">create_easy_level_2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">level_build-&gt;<span class="built_in">set_level_name</span>(<span class="string">&quot;Forest&quot;</span>);</span><br><span class="line">level_build-&gt;<span class="built_in">add_enemy</span>(<span class="string">&quot;Slime&quot;</span>);</span><br><span class="line">level_build-&gt;<span class="built_in">add_enemy</span>(<span class="string">&quot;Wolf&quot;</span>);</span><br><span class="line">level_build-&gt;<span class="built_in">add_enemy</span>(<span class="string">&quot;Goblin&quot;</span>);</span><br><span class="line">level_build-&gt;<span class="built_in">add_item</span>(<span class="string">&quot;Stone&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> level_build-&gt;<span class="built_in">build</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">GameLevel* <span class="title">create_hard_level_1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">level_build-&gt;<span class="built_in">set_level_name</span>(<span class="string">&quot;Swamp&quot;</span>);</span><br><span class="line">level_build-&gt;<span class="built_in">set_mode</span>();</span><br><span class="line">level_build-&gt;<span class="built_in">add_enemy</span>(<span class="string">&quot;Slime&quot;</span>);</span><br><span class="line">level_build-&gt;<span class="built_in">add_enemy</span>(<span class="string">&quot;Slime&quot;</span>);</span><br><span class="line">level_build-&gt;<span class="built_in">add_enemy</span>(<span class="string">&quot;Wolf&quot;</span>);</span><br><span class="line">level_build-&gt;<span class="built_in">add_enemy</span>(<span class="string">&quot;Goblin&quot;</span>);</span><br><span class="line">level_build-&gt;<span class="built_in">add_enemy</span>(<span class="string">&quot;Wolf&quot;</span>);</span><br><span class="line">level_build-&gt;<span class="built_in">add_item</span>(<span class="string">&quot;Apple&quot;</span>);</span><br><span class="line">level_build-&gt;<span class="built_in">add_item</span>(<span class="string">&quot;Sword&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> level_build-&gt;<span class="built_in">build</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">GameLevel* <span class="title">create_hard_level_2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">level_build-&gt;<span class="built_in">set_level_name</span>(<span class="string">&quot;Swamp&quot;</span>);</span><br><span class="line">level_build-&gt;<span class="built_in">set_mode</span>();</span><br><span class="line">level_build-&gt;<span class="built_in">add_enemy</span>(<span class="string">&quot;Slime&quot;</span>);</span><br><span class="line">level_build-&gt;<span class="built_in">add_enemy</span>(<span class="string">&quot;Goblin&quot;</span>);</span><br><span class="line">level_build-&gt;<span class="built_in">add_enemy</span>(<span class="string">&quot;Goblin&quot;</span>);</span><br><span class="line">level_build-&gt;<span class="built_in">add_enemy</span>(<span class="string">&quot;Wolf&quot;</span>);</span><br><span class="line">level_build-&gt;<span class="built_in">add_enemy</span>(<span class="string">&quot;Wolf&quot;</span>);</span><br><span class="line">level_build-&gt;<span class="built_in">add_item</span>(<span class="string">&quot;Apple&quot;</span>);</span><br><span class="line">level_build-&gt;<span class="built_in">add_item</span>(<span class="string">&quot;Sword&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> level_build-&gt;<span class="built_in">build</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">LevelBuilder* level_build;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BuilderPattern</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">BuilderPattern</span>()</span><br><span class="line">&#123;</span><br><span class="line">easy_dir = <span class="keyword">new</span> <span class="built_in">GameLevelDirector</span>(<span class="keyword">new</span> <span class="built_in">EasyLevelBuilder</span>());</span><br><span class="line">easy_dir-&gt;<span class="built_in">create_easy_level_1</span>();</span><br><span class="line">easy_dir-&gt;<span class="built_in">create_easy_level_2</span>();</span><br><span class="line"></span><br><span class="line">hard_dir = <span class="keyword">new</span> <span class="built_in">GameLevelDirector</span>(<span class="keyword">new</span> <span class="built_in">HardLevelBuilder</span>());</span><br><span class="line">hard_dir-&gt;<span class="built_in">create_hard_level_1</span>();</span><br><span class="line">hard_dir-&gt;<span class="built_in">create_hard_level_2</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">BuilderPattern</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">GameLevelDirector* easy_dir;</span><br><span class="line">GameLevelDirector* hard_dir;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h4><ol><li><b>简化构造参数</b></li></ol><ul><li>拆分单个类的构造任务到多个生成器步骤，避免构造产品对象时需要过多的构造参数</li></ul><ol start="2"><li><b>灵活组合步骤</b></li></ol><ul><li>解耦构造过程，从而使用组合灵活地产出更多变种的产品</li></ul><ol start="3"><li><b>动态感知构造过程</b></li></ol><ul><li>导演类可以看作是对构造器的屏蔽与封装，借助导演类可以在运行时根据建造过程调整各部分任务，暂缓创建或执行递归构造</li></ul><div style="border-top: 3px solid black; font-weight: bold; margin: 20px 0;"></div><h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><ul><li>通过复制现有对象来创建新对象，而不是通过实例化类来创建新对象</li><li><i>适用于创建大量相似对象的场景，避免了重复的初始化和构造过程</i></li></ul><h4 id="要素-3"><a href="#要素-3" class="headerlink" title="要素"></a>要素</h4><ol><li><p><b>原型接口</b></p></li><li><p><b>具体原型</b></p></li></ol><p><b>示例代码</b></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 原型接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Prototype</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> Prototype* <span class="title">clone</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>;<span class="comment">// 克隆</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">showInfo</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>;<span class="comment">// 显示信息</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Soldier</span> : <span class="keyword">public</span> Prototype</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Soldier</span>(std::string type, <span class="type">int</span> health, <span class="type">int</span> attack, <span class="type">int</span> defense)</span><br><span class="line">: <span class="built_in">type</span>(type), <span class="built_in">health</span>(health), <span class="built_in">attack</span>(attack), <span class="built_in">defense</span>(defense) &#123;&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Soldier</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Prototype* <span class="title">clone</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Soldier</span>(*<span class="keyword">this</span>);<span class="comment">// 调用自身拷贝构造函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showInfo</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;type:&quot;</span> &lt;&lt; type &lt;&lt; <span class="string">&quot; health:&quot;</span> &lt;&lt; health</span><br><span class="line">&lt;&lt; <span class="string">&quot; attack:&quot;</span> &lt;&lt; attack &lt;&lt; <span class="string">&quot; defense:&quot;</span> &lt;&lt; defense &lt;&lt; std::endl;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">std::string type;</span><br><span class="line"><span class="type">int</span> health;</span><br><span class="line"><span class="type">int</span> attack;</span><br><span class="line"><span class="type">int</span> defense;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Archer</span> : <span class="keyword">public</span> Prototype</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Archer</span>(std::string type, <span class="type">int</span> health, <span class="type">int</span> attack, <span class="type">int</span> defense)</span><br><span class="line">: <span class="built_in">type</span>(type), <span class="built_in">health</span>(health), <span class="built_in">attack</span>(attack), <span class="built_in">defense</span>(defense) &#123;&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Archer</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Prototype* <span class="title">clone</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Archer</span>(*<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showInfo</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;type:&quot;</span> &lt;&lt; type &lt;&lt; <span class="string">&quot; health:&quot;</span> &lt;&lt; health</span><br><span class="line">&lt;&lt; <span class="string">&quot; attack:&quot;</span> &lt;&lt; attack &lt;&lt; <span class="string">&quot; defense:&quot;</span> &lt;&lt; defense &lt;&lt; std::endl;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">std::string type;</span><br><span class="line"><span class="type">int</span> health;</span><br><span class="line"><span class="type">int</span> attack;</span><br><span class="line"><span class="type">int</span> defense;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Knight</span> : <span class="keyword">public</span> Prototype</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Knight</span>(std::string type, <span class="type">int</span> health, <span class="type">int</span> attack, <span class="type">int</span> defense)</span><br><span class="line">: <span class="built_in">type</span>(type), <span class="built_in">health</span>(health), <span class="built_in">attack</span>(attack), <span class="built_in">defense</span>(defense) &#123;&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Knight</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Prototype* <span class="title">clone</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Knight</span>(*<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showInfo</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;type:&quot;</span> &lt;&lt; type &lt;&lt; <span class="string">&quot; health:&quot;</span> &lt;&lt; health</span><br><span class="line">&lt;&lt; <span class="string">&quot; attack:&quot;</span> &lt;&lt; attack &lt;&lt; <span class="string">&quot; defense:&quot;</span> &lt;&lt; defense &lt;&lt; std::endl;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">std::string type;</span><br><span class="line"><span class="type">int</span> health;</span><br><span class="line"><span class="type">int</span> attack;</span><br><span class="line"><span class="type">int</span> defense;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Soldier* soldierPrototype = <span class="keyword">new</span> <span class="built_in">Soldier</span>(<span class="string">&quot;Infantry&quot;</span>, <span class="number">100</span>, <span class="number">10</span>, <span class="number">5</span>);</span><br><span class="line">Archer* soldierPrototype = <span class="keyword">new</span> <span class="built_in">Archer</span>(<span class="string">&quot;Longbow&quot;</span>, <span class="number">80</span>, <span class="number">15</span>, <span class="number">3</span>);</span><br><span class="line">Knight* soldierPrototype = <span class="keyword">new</span> <span class="built_in">Knight</span>(<span class="string">&quot;Cavalry&quot;</span>, <span class="number">150</span>, <span class="number">20</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">Prototype* clone_soldier = soldierPrototype-&gt;<span class="built_in">clone</span>();</span><br><span class="line">Prototype* clone_archer = soldierPrototype-&gt;<span class="built_in">clone</span>();</span><br><span class="line">Prototype* clone_knight = soldierPrototype-&gt;<span class="built_in">clone</span>();</span><br><span class="line"></span><br><span class="line">clone_soldier-&gt;<span class="built_in">showInfo</span>();</span><br><span class="line">clone_archer-&gt;<span class="built_in">showInfo</span>();</span><br><span class="line">clone_knight-&gt;<span class="built_in">showInfo</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优点-3"><a href="#优点-3" class="headerlink" title="优点"></a>优点</h4><ol><li><p><b>避免重复初始化，提升性能</b></p></li><li><p><b>动态生成对象副本，支持运行时配置</b></p></li></ol><h4 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h4><ol><li><b>为何不直接使用拷贝构造函数</b></li></ol><ul><li>拷贝构造函数是静态实现，要使用拷贝构造函数时需要知道具体的类；而原型模式是动态实现的，使用原型模式时只需要知道原型接口即可</li><li>拷贝构造函数涉及到浅拷贝和深拷贝，除去内存上的问题，若不保留原型直接使用场内原有的对象进行拷贝，容易拷贝多余的对象状态造成污染</li></ul><ol start="2"><li><b>为何不能在类外手动调用拷贝类内字段</b></li></ol><ul><li>私有字段不宜访问，会产生依赖；而原型模式可以通过原型接口来实现对类内字段的访问和操作</li><li>面对复杂字段的对象非常繁琐，会增加人为失误的可能</li><li>这种方法同样需要知晓具体子类，产生不必要的依赖</li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
